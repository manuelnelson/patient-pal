{"version":3,"sources":["../src/server/config.js"],"names":["require","config","envVarsSchema","object","NODE_ENV","string","allow","default","PORT","number","MONGOOSE_DEBUG","boolean","when","is","equal","then","otherwise","JWT_SECRET","required","description","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","unknown","validate","process","env","error","envVars","value","Error","message","port","mongooseDebug","awsAcessKey","awsSecret","jwtSecret","mongo","host","MONGO_HOST","MONGO_PORT","bodyLimit","corsHeaders"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;AACA,IAAMC,gBAAgB,cAAIC,MAAJ,CAAW;AAC/BC,YAAU,cAAIC,MAAJ,GACPC,KADO,CACD,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,WAAtC,CADC,EAEPC,OAFO,CAEC,aAFD,CADqB;AAI/BC,QAAM,cAAIC,MAAJ,GACHF,OADG,CACK,IADL,CAJyB;AAM/BG,kBAAgB,cAAIC,OAAJ,GACbC,IADa,CACR,UADQ,EACI;AAChBC,QAAI,cAAIR,MAAJ,GAAaS,KAAb,CAAmB,aAAnB,CADY;AAEhBC,UAAM,cAAIJ,OAAJ,GAAcJ,OAAd,CAAsB,IAAtB,CAFU;AAGhBS,eAAW,cAAIL,OAAJ,GAAcJ,OAAd,CAAsB,KAAtB;AAHK,GADJ,CANe;AAY/BU,cAAY,cAAIZ,MAAJ,GAAaa,QAAb,GACTC,WADS,CACG,6BADH,CAZmB;AAc/BC,qBAAmB,cAAIf,MAAJ,GAAaa,QAAb,GAClBC,WADkB,CACN,sCADM,CAdY;AAgB/BE,yBAAuB,cAAIhB,MAAJ,GAAaa,QAAb,GACtBC,WADsB,CACV,sCADU;AAhBQ,CAAX,EAsBnBG,OAtBmB,GAuBnBJ,QAvBmB,EAAtB;;oBAyBkC,cAAIK,QAAJ,CAAaC,QAAQC,GAArB,EAA0BvB,aAA1B,C;IAA1BwB,K,iBAAAA,K;IAAcC,O,iBAAPC,K;;AACf,IAAIF,KAAJ,EAAW;AACT,QAAM,IAAIG,KAAJ,+BAAsCH,MAAMI,OAA5C,CAAN;AACD;;AAED,IAAM7B,SAAS;AACbwB,OAAKE,QAAQvB,QADA;AAEb2B,QAAMJ,QAAQnB,IAFD;AAGbwB,iBAAeL,QAAQjB,cAHV;AAIbuB,eAAaN,QAAQP,iBAJR;AAKbc,aAAWP,QAAQN,qBALN;AAMbc,aAAWR,QAAQV,UANN;AAObmB,SAAO;AACLC,UAAMV,QAAQW,UADT;AAELP,UAAMJ,QAAQY,UAAR,IAAsB;AAFvB,GAPM;AAWbC,aAAW,OAXE;AAYbC,eAAa,CAAC,MAAD;;AAZA,CAAf;;kBAgBexC,M","file":"config.js","sourcesContent":["import Joi from 'joi';\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config();\r\n\r\n// define validation for all the env vars\r\nconst envVarsSchema = Joi.object({\r\n  NODE_ENV: Joi.string()\r\n    .allow(['development', 'production', 'test', 'provision'])\r\n    .default('development'),\r\n  PORT: Joi.number()\r\n    .default(3000),\r\n  MONGOOSE_DEBUG: Joi.boolean()\r\n    .when('NODE_ENV', {\r\n      is: Joi.string().equal('development'),\r\n      then: Joi.boolean().default(true),\r\n      otherwise: Joi.boolean().default(false)\r\n    }),\r\n  JWT_SECRET: Joi.string().required()\r\n    .description('JWT Secret required to sign'),\r\n  AWS_ACCESS_KEY_ID: Joi.string().required()\r\n  .description('Amazon access key required for files'),\r\n  AWS_SECRET_ACCESS_KEY: Joi.string().required()\r\n  .description('Amazon secret key required for files'),\r\n  // MONGO_HOST: Joi.string().required()\r\n  //   .description('Mongo DB host url'),\r\n  // MONGO_PORT: Joi.number()\r\n  //   .default(27017)\r\n}).unknown()\r\n  .required();\r\n\r\nconst { error, value: envVars } = Joi.validate(process.env, envVarsSchema);\r\nif (error) {\r\n  throw new Error(`Config validation error: ${error.message}`);\r\n}\r\n\r\nconst config = {\r\n  env: envVars.NODE_ENV,\r\n  port: envVars.PORT,\r\n  mongooseDebug: envVars.MONGOOSE_DEBUG,\r\n  awsAcessKey: envVars.AWS_ACCESS_KEY_ID,\r\n  awsSecret: envVars.AWS_SECRET_ACCESS_KEY,\r\n  jwtSecret: envVars.JWT_SECRET,\r\n  mongo: {\r\n    host: envVars.MONGO_HOST,\r\n    port: envVars.MONGO_PORT || 3000\r\n  },\r\n  bodyLimit: \"100kb\",\r\n  corsHeaders: [\"Link\"]\r\n\r\n};\r\n\r\nexport default config;\r\n"]}