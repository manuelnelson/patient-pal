{"version":3,"sources":["../src/server/config.js"],"names":["require","config","envVarsSchema","object","NODE_ENV","string","allow","default","PORT","number","MONGOOSE_DEBUG","boolean","when","is","equal","then","otherwise","JWT_SECRET","required","description","MONGO_HOST","MONGO_PORT","unknown","console","log","validate","process","env","error","envVars","value","Error","message","port","mongooseDebug","jwtSecret","mongo","host","bodyLimit","corsHeaders"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;AACA,IAAMC,gBAAgB,cAAIC,MAAJ,CAAW;AAC/BC,YAAU,cAAIC,MAAJ,GACPC,KADO,CACD,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,WAAtC,CADC,EAEPC,OAFO,CAEC,aAFD,CADqB;AAI/BC,QAAM,cAAIC,MAAJ,GACHF,OADG,CACK,IADL,CAJyB;AAM/BG,kBAAgB,cAAIC,OAAJ,GACbC,IADa,CACR,UADQ,EACI;AAChBC,QAAI,cAAIR,MAAJ,GAAaS,KAAb,CAAmB,aAAnB,CADY;AAEhBC,UAAM,cAAIJ,OAAJ,GAAcJ,OAAd,CAAsB,IAAtB,CAFU;AAGhBS,eAAW,cAAIL,OAAJ,GAAcJ,OAAd,CAAsB,KAAtB;AAHK,GADJ,CANe;AAY/BU,cAAY,cAAIZ,MAAJ,GAAaa,QAAb,GACTC,WADS,CACG,6BADH,CAZmB;AAc/BC,cAAY,cAAIf,MAAJ,GAAaa,QAAb,GACTC,WADS,CACG,mBADH,CAdmB;AAgB/BE,cAAY,cAAIZ,MAAJ,GACTF,OADS,CACD,KADC;AAhBmB,CAAX,EAkBnBe,OAlBmB,GAmBnBJ,QAnBmB,EAAtB;AAoBAK,QAAQC,GAAR,CAAY,OAAZ;;oBACkC,cAAIC,QAAJ,CAAaC,QAAQC,GAArB,EAA0BzB,aAA1B,C;IAA1B0B,K,iBAAAA,K;IAAcC,O,iBAAPC,K;;AACf,IAAIF,KAAJ,EAAW;AACPL,UAAQC,GAAR,CAAY,SAAZ;AACF,QAAM,IAAIO,KAAJ,+BAAsCH,MAAMI,OAA5C,CAAN;AACD;;AAED,IAAM/B,SAAS;AACb0B,OAAKE,QAAQzB,QADA;AAEb6B,QAAMJ,QAAQrB,IAFD;AAGb0B,iBAAeL,QAAQnB,cAHV;AAIbyB,aAAWN,QAAQZ,UAJN;AAKbmB,SAAO;AACLC,UAAMR,QAAQT,UADT;AAELa,UAAMJ,QAAQR,UAAR,IAAsB;AAFvB,GALM;AASbiB,aAAW,OATE;AAUbC,eAAa,CAAC,MAAD;;AAVA,CAAf;;kBAcetC,M","file":"config.js","sourcesContent":["import Joi from 'joi';\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config();\r\n\r\n// define validation for all the env vars\r\nconst envVarsSchema = Joi.object({\r\n  NODE_ENV: Joi.string()\r\n    .allow(['development', 'production', 'test', 'provision'])\r\n    .default('development'),\r\n  PORT: Joi.number()\r\n    .default(3000),\r\n  MONGOOSE_DEBUG: Joi.boolean()\r\n    .when('NODE_ENV', {\r\n      is: Joi.string().equal('development'),\r\n      then: Joi.boolean().default(true),\r\n      otherwise: Joi.boolean().default(false)\r\n    }),\r\n  JWT_SECRET: Joi.string().required()\r\n    .description('JWT Secret required to sign'),\r\n  MONGO_HOST: Joi.string().required()\r\n    .description('Mongo DB host url'),\r\n  MONGO_PORT: Joi.number()\r\n    .default(27017)\r\n}).unknown()\r\n  .required();\r\nconsole.log('testt');\r\nconst { error, value: envVars } = Joi.validate(process.env, envVarsSchema);\r\nif (error) {\r\n    console.log('error!!');\r\n  throw new Error(`Config validation error: ${error.message}`);\r\n}\r\n\r\nconst config = {\r\n  env: envVars.NODE_ENV,\r\n  port: envVars.PORT,\r\n  mongooseDebug: envVars.MONGOOSE_DEBUG,\r\n  jwtSecret: envVars.JWT_SECRET,\r\n  mongo: {\r\n    host: envVars.MONGO_HOST,\r\n    port: envVars.MONGO_PORT || 3000\r\n  },\r\n  bodyLimit: \"100kb\",\r\n  corsHeaders: [\"Link\"]\r\n\r\n};\r\n\r\nexport default config;\r\n"]}