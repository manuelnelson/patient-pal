{"version":3,"sources":["../src/server/index.js"],"names":["app","use","static","join","__dirname","env","json","urlencoded","extended","exposedHeaders","corsHeaders","requestWhitelist","push","responseWhitelist","logger","winstonInstance","meta","msg","colorStatus","config","db","err","req","res","next","ValidationError","unifiedErrorMessage","errors","map","error","messages","status","apiError","message","isPublic","NOT_FOUND","errorLogger","stack","listen","process","PORT","port","console","log"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport compress from 'compression';\r\nimport path from 'path';\r\nimport helmet from 'helmet';\r\nimport httpStatus from 'http-status';\r\nimport cookieParser from 'cookie-parser';\r\nimport expressWinston from 'express-winston';\r\nimport expressValidation from 'express-validation';\r\nimport config from './config';\r\nimport winstonInstance from './config/winston';\r\nimport initializeDb from './db';\r\nimport middleware from './middleware';\r\nimport api from './api';\r\nimport APIError from './lib/APIError';\r\n\r\nlet app = express();\r\n\r\n// connect to db\r\ninitializeDb( db => {\r\n\r\n\t//static files\r\n\tapp.use(express.static(path.join(__dirname, 'public')));\r\n\t// logger\r\n\tif (config.env === 'development') {\r\n\t\tapp.use(morgan('dev'));\r\n\t}\r\n\r\n\t// 3rd party middleware\r\n\tapp.use(bodyParser.json());\r\n\tapp.use(bodyParser.urlencoded({ extended: true }));\r\n\tapp.use(cookieParser());\r\n\t//https://github.com/expressjs/compression\r\n\tapp.use(compress());\r\n\r\n\t//https://github.com/helmetjs/helmet aka security add-on\r\n\tapp.use(helmet());\r\n\r\n\tapp.use(cors({\r\n\t\texposedHeaders: config.corsHeaders\r\n\t}));\r\n\r\n\t// enable detailed API logging in dev env\r\n\tif (config.env === 'development') {\r\n\t\texpressWinston.requestWhitelist.push('body');\r\n\t\texpressWinston.responseWhitelist.push('body');\r\n\t\tapp.use(expressWinston.logger({\r\n\t\t\twinstonInstance,\r\n\t\t\tmeta: true, // optional: log meta data about request (defaults to true)\r\n\t\t\tmsg: 'HTTP {{req.method}} {{req.url}} {{res.statusCode}} {{res.responseTime}}ms',\r\n\t\t\tcolorStatus: true // Color the status code (default green, 3XX cyan, 4XX yellow, 5XX red).\r\n\t\t}));\r\n\t}\r\n\t// internal middleware\r\n\tapp.use(middleware({ config, db }));\r\n\r\n\t// api router\r\n\tapp.use('/api', api({ config, db }));\r\n\t// api router\r\n\tapp.use('/', express.static('/index.html'));\r\n\r\n\t// if error is not an instanceOf APIError, convert it.\r\n\tapp.use((err, req, res, next) => {\r\n\t\tif (err instanceof expressValidation.ValidationError) {\r\n\t\t\t// validation error contains errors which is an array of error each containing message[]\r\n\t\t\tconst unifiedErrorMessage = err.errors.map(error => error.messages.join('. ')).join(' and ');\r\n\t\t\tconst error = new APIError(unifiedErrorMessage, err.status, true);\r\n\t\t\treturn next(error);\r\n\t\t} else if (!(err instanceof APIError)) {\r\n\t\t\tconst apiError = new APIError(err.message, err.status, err.isPublic);\r\n\t\t\treturn next(apiError);\r\n\t\t}\r\n\t\treturn next(err);\r\n\t});\r\n\t// catch 404 and forward to error handler\r\n\tapp.use((req, res, next) => {\r\n\t\tconst err = new APIError('API not found', httpStatus.NOT_FOUND);\r\n\t\treturn next(err);\r\n\t});\r\n\r\n\t// log error in winston transports except when executing test suite\r\n\tif (config.env !== 'test') {\r\n\t\tapp.use(expressWinston.errorLogger({\r\n\t\t\twinstonInstance\r\n\t\t}));\r\n\t}\r\n\t// error handler, send stacktrace only during development\r\n\tapp.use((err, req, res, next) => // eslint-disable-line no-unused-vars\r\n\t\tres.status(err.status).json({\r\n\t\t\tmessage: err.isPublic ? err.message : httpStatus[err.status],\r\n\t\t\tstack: config.env === 'development' ? err.stack : {}\r\n\t\t})\r\n\t);\r\n\r\n\tapp.listen(process.env.PORT || config.port,()=>{\r\n\t\tconsole.log(`Started on port ${config.port}`);\r\n\t});\r\n\r\n});\r\n\r\nexport default app;\r\n"]}