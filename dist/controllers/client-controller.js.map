{"version":3,"sources":["../../src/server/controllers/client-controller.js"],"names":["load","req","res","next","userId","get","then","client","catch","e","json","getAppointments","find","_id","populate","sort","exec","appointments","create","getByEmail","body","email","existingClient","err","FORBIDDEN","firstname","lastname","birth","sex","insurance","status","save","findOneAndUpdate","locals","sessionUserEmail","$push","clients","savedClient","result","existingUser","length","update","user","role","roles","Client","password","defaultPassword","list","query","limit","skip","remove","deletedClient"],"mappings":"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","file":"client-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {Client, Professional, User, Appointment} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load client and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Client.get(userId)\r\n    .then((client) => {\r\n        req.client = client;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get client\r\n* @returns {Client}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.client);\r\n}\r\n\r\n/**\r\n* Get client's Appointments\r\n* @returns {Appointment[]}\r\n*/\r\nfunction getAppointments(req, res, next) {\r\n    Appointment.find({client: req.client._id}) \r\n        .populate('client professional')\r\n        .sort('startDate')\r\n        .exec()\r\n        .then(appointments => res.json(appointments));\r\n}\r\n\r\n\r\n/**\r\n* Checks if user exists with same email as client.  If not, it creates a new User with the email provided and a default password. Then creates the Client to reside in the new user\r\n* @returns {Client}\r\n*/\r\nfunction create(req, res, next) {\r\n    Client.getByEmail(req.body.email).then(existingClient =>{\r\n        if(existingClient){\r\n            const err = new APIError('Error: Client Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            const client = new Client({\r\n                firstname: req.body.firstname,\r\n                lastname: req.body.lastname,\r\n                email: req.body.email,\r\n                birth: req.body.birth,\r\n                sex: req.body.sex,\r\n                insurance: req.body.insurance,\r\n                status: 1\r\n            }).save().then(savedClient =>{\r\n                //asynchronously add client to current professional\r\n                Professional.findOneAndUpdate({email: req.locals.sessionUserEmail}, {$push:{clients:savedClient}}, (err,result) =>{});\r\n\r\n                //check if user already exists\r\n                User.getByEmail(req.body.email)\r\n                .then(existingUser=>{\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.client = savedClient._id;\r\n                        existingUser.update().then(savedUser => {\r\n                            return res.json(savedClient);\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach client\r\n                        const user = new User({\r\n                            role: Constants.roles.Client,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            client: savedClient._id\r\n                        }).save().then(savedUser => {\r\n                            return res.json(savedClient);\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing client\r\n* @property {string} req.body.email - The email of client.\r\n* @returns {Client}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    const client = req.client;\r\n    client.email = req.body.email;\r\n    client.firstname = req.body.firstname;\r\n    client.lastname = req.body.lastname;\r\n    client.insurance = req.body.insurance;\r\n    client.sex = req.body.sex;\r\n    client.birth = req.body.birth;\r\n\r\n    client.save()\r\n    .then(savedClient => res.json(savedClient))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get client list.\r\n* @property {number} req.query.skip - Number of clients to be skipped.\r\n* @property {number} req.query.limit - Limit number of clients to be returned.\r\n* @returns {Client[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    Client.list({ limit, skip })\r\n    .then(clients => res.json(clients))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete client.\r\n* @returns {Client}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const client = req.client;\r\n    client.remove()\r\n    .then(deletedClient => res.json(deletedClient))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getAppointments };\r\n"]}