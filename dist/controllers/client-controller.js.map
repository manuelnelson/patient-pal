{"version":3,"sources":["../../src/server/controllers/client-controller.js"],"names":["load","req","res","next","userId","get","then","client","catch","e","getAppointments","find","_id","populate","sort","exec","appointments","create","exists","body","email","existingClient","err","FORBIDDEN","firstname","lastname","birth","sex","insurance","organization","status","save","getByEmail","existingUser","length","savedClient","update","savedObj","toObject","savedUser","role","roles","Client","password","defaultPassword","list","query","limit","skip","queryObj","buildQuery","$or","createdAt","clients","Object","keys","array","key","obj","push","remove","deletedClient"],"mappings":"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","file":"client-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {Client, Professional, User, Appointment} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load client and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Client.get(userId)\r\n    .then((client) => {\r\n        req.client = client;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get client\r\n* @returns {Client}\r\n*/\r\nfunction get(req, res) {\r\n    return req.client;\r\n}\r\n\r\n/**\r\n* Get client's Appointments\r\n* @returns {Appointment[]}\r\n*/\r\nfunction getAppointments(req, res, next) {\r\n    return Appointment.find({client: req.client._id}) \r\n        .populate('client professional')\r\n        .sort('startDate')\r\n        .exec()\r\n        .then(appointments => appointments);\r\n}\r\n\r\n\r\n/**\r\n* Checks if user exists with same email as client.  If not, it creates a new User with the email provided and a default password. Then creates the Client to reside in the new user\r\n* @returns {Client}\r\n*/\r\nfunction create(req, res, next) {\r\n    return Client.exists(req.body.email).then(existingClient =>{\r\n        if(existingClient){\r\n            const err = new APIError('Error: Client Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            return new Client({\r\n                firstname: req.body.firstname,\r\n                lastname: req.body.lastname,\r\n                email: req.body.email,\r\n                birth: req.body.birth,\r\n                sex: req.body.sex,\r\n                insurance: req.body.insurance,\r\n                organization: req.body.organization,\r\n                status: 1\r\n            }).save().then(savedClient =>{\r\n                //asynchronously add client to current professional -- doing this by organization now...\r\n                //Professional.findOneAndUpdate({email: req.locals.sessionUserEmail}, {$push:{clients:savedClient}}, (err,result) =>{});\r\n\r\n                //check if user already exists\r\n                return User.getByEmail(req.body.email)\r\n                .then(existingUser=>{\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.client = savedClient._id;\r\n                        return existingUser.update().then(savedUser => {\r\n                            //return userid with professional\r\n                            let savedObj = savedClient.toObject();\r\n                            savedObj.userId = savedUser._id;\r\n                            return savedObj;\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach client\r\n                        return new User({\r\n                            role: Constants.roles.Client,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            client: savedClient._id\r\n                        }).save().then(savedUser => {\r\n                            let savedObj = savedClient.toObject();\r\n                            savedObj.userId = savedUser._id;\r\n                            return savedObj;\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing client\r\n* @property {string} req.body.email - The email of client.\r\n* @returns {Client}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    const client = req.client;\r\n    client.email = req.body.email;\r\n    client.firstname = req.body.firstname;\r\n    client.lastname = req.body.lastname;\r\n    client.insurance = req.body.insurance;\r\n    client.sex = req.body.sex;\r\n    client.birth = req.body.birth;\r\n\r\n    return client.save()\r\n    .then(savedClient => savedClient)\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get client list.\r\n* @property {number} req.query.skip - Number of clients to be skipped.\r\n* @property {number} req.query.limit - Limit number of clients to be returned.\r\n* @returns {Client[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;    \r\n    let queryObj = buildQuery(req);\r\n    \r\n    return Client.find(queryObj.length > 0 ? {$or: queryObj} : {})\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .then(clients => clients)\r\n        .catch(e => next(e));\r\n}\r\n\r\nfunction buildQuery(req){\r\n    if (Object.keys(req.query).length === 0) return [];\r\n    var array = [];\r\n    for (var key in req.query) {\r\n        var obj = {};\r\n        obj[key] = req.query[key];\r\n        array.push(obj);\r\n    }\r\n    return array;\r\n}\r\n\r\n\r\n/**\r\n* Delete client.\r\n* @returns {Client}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const client = req.client;\r\n    return client.remove()\r\n    .then(deletedClient => deletedClient)\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getAppointments };\r\n"]}