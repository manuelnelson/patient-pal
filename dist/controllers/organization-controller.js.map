{"version":3,"sources":["../../src/server/controllers/organization-controller.js"],"names":["load","req","res","next","id","get","then","organization","catch","e","create","body","save","savedOrganization","update","prop","list","query","limit","skip","queryObj","buildQuery","find","length","$or","sort","createdAt","organizations","Object","keys","array","key","obj","push","remove","deletedOrganization"],"mappings":"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","file":"organization-controller.js","sourcesContent":["import {Organization} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load organization and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    Organization.get(id)\r\n    .then((organization) => {\r\n        req.organization = organization;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get organization\r\n* @returns {Organization}\r\n*/\r\nfunction get(req, res) {\r\n    return req.organization;\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as organization.  If not, it creates a new User with the email provided and a default password. Then creates the Organization to reside in the new user\r\n* @returns {Organization}\r\n*/\r\nfunction create(req, res, next) {\r\n    return new Organization(req.body)\r\n        .save()\r\n        .then(savedOrganization => savedOrganization)\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing organization\r\n* @returns {Organization}\r\n*/\r\nfunction update(req, res, next) {\r\n    const organization = req.organization;\r\n    for(let prop in req.organization){\r\n        organization[prop] = req.organization[prop];\r\n    }\r\n    organization.save()\r\n    .then(savedOrganization => savedOrganization)\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get organization list.\r\n* @property {number} req.query.skip - Number of organizations to be skipped.\r\n* @property {number} req.query.limit - Limit number of organizations to be returned.\r\n* @returns {Organization[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;    \r\n    let queryObj = buildQuery(req);\r\n    \r\n    return Organization.find(queryObj.length > 0 ? {$or: queryObj} : {})\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .then(organizations => organizations)\r\n        .catch(e => next(e));\r\n}\r\n\r\nfunction buildQuery(req){\r\n    if (Object.keys(req.query).length === 0) return [];\r\n    var array = [];\r\n    for (var key in req.query) {\r\n        // if (_.indexOf(dateKeys, key) > -1) {\r\n        //     if (key == 'startDate') {\r\n        //         array.push({ createdAt: { $gt: req.query[key] } });\r\n        //     }\r\n        //     if (key == 'endDate') array.push({ createdAt: { $lt: req.query[key] } });\r\n        // } else {\r\n            var obj = {};\r\n            obj[key] = req.query[key];\r\n            array.push(obj);\r\n        // }\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n* Delete organization.\r\n* @returns {Organization}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const organization = req.organization;\r\n    organization.remove()\r\n    .then(deletedOrganization => deletedOrganization)\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove };\r\n"]}