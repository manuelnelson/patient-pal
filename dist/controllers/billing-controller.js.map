{"version":3,"sources":["../../src/server/controllers/billing-controller.js"],"names":["_","stripe","require","getCustomer","req","res","next","getById","query","organizationId","then","customers","retrieve","org","stripeCustomerId","customer","catch","e","createCustomer","create","description","locals","sessionUserEmail","email","createSource","body","source","token","update","stripeSourceId","id","organization","getSubscription","subscriptions","params","subscription","updateSubscription","subscriptionId","createSubscription","billing","items","plan"],"mappings":"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","file":"billing-controller.js","sourcesContent":["import {Appointment} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\nimport {ProfessionalCtrl, OrganizationCtrl} from '../controllers';\r\nimport * as _ from 'lodash';\r\nlet stripe = require('stripe')('sk_test_6NSkvQScMlPpq0NdmHS4WiQf');\r\n\r\n/**\r\n* Get stripe customer based on organization id\r\n* @returns {Customer}\r\n*/\r\nfunction getCustomer(req, res, next) {\r\n    //get organization\r\n    return OrganizationCtrl.getById(req,res,next, req.query.organizationId)\r\n    .then(org => stripe.customers.retrieve(org.stripeCustomerId).then(customer => customer))\r\n    .catch(e => next(e));\r\n\r\n    //query customer\r\n}\r\n\r\n/**\r\n* Creates a Stripe customer\r\n* @returns {Customer}\r\n*/\r\nfunction createCustomer(req, res, next) {\r\n   \r\n    return stripe.customers.create({\r\n        description: `Customer for ${req.locals.sessionUserEmail}`,\r\n        email: req.locals.sessionUserEmail\r\n    })\r\n    .then((customer) => customer)\r\n    .catch(e => next(e));\r\n    \r\n}\r\n\r\n// Stripes Source is a payment source that is connected to a customer.\r\n//https://stripe.com/docs/api/node#create_card\r\nfunction createSource(req, res, next) {\r\n    \r\n     return stripe.customers.createSource(req.body.customer,{\r\n         source: req.body.token,\r\n     })\r\n     .then((source) => {\r\n         //update organization\r\n         return OrganizationCtrl.getById(req,res,next, req.body.organizationId)\r\n             .then(org => {                \r\n                 return OrganizationCtrl.update({body:{stripeSourceId: source.id}, organization: org}, res, next)\r\n                     .then(updatedOrg => source)\r\n                     .catch(e => next(e));\r\n             })\r\n             .catch(e => next(e));\r\n     })\r\n     .catch(e => next(e));\r\n     \r\n }\r\n \r\n//  function createSubscription(req, res, next) {    \r\n//      return stripe.customers.createSource(req.body.customer,{\r\n//          source: req.body.token,\r\n//      })\r\n//      .then((source) => {\r\n//          //update organization\r\n//          return OrganizationCtrl.getById(req,res,next, req.body.organizationId)\r\n//              .then(org => {                \r\n//                  return OrganizationCtrl.update({body:{stripeSourceId: source.id}, organization: org}, res, next)\r\n//                      .then(updatedOrg => source)\r\n//                      .catch(e => next(e));\r\n//              })\r\n//              .catch(e => next(e));\r\n//      })\r\n//      .catch(e => next(e));     \r\n//  }\r\n\r\nfunction getSubscription(req,res,next){\r\n    return stripe.subscriptions.retrieve(req.params.id)\r\n        .then(subscription => subscription)\r\n        .catch(e => next(e));\r\n}\r\n\r\nfunction updateSubscription(req,res,next){\r\n    return stripe.subscriptions.update(req.query.subscriptionId, req.body)\r\n        .then(subscription => subscription)\r\n        .catch(e => next(e));\r\n\r\n}\r\n\r\nfunction createSubscription(req, res, next) {    \r\n     return stripe.subscriptions.create({\r\n         customer: req.body.customer,\r\n         billing: 'send_invoice',\r\n         \"days_until_due\": 31,\r\n         items:[\r\n             {\r\n                 plan: \"pl_default\"\r\n             }\r\n         ]\r\n     })\r\n     .then((subscription) => subscription)\r\n     .catch(e => next(e));\r\n     \r\n }\r\n\r\nexport default { createCustomer, getCustomer, createSource, createSubscription, getSubscription, updateSubscription};\r\n"]}