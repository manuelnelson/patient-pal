{"version":3,"sources":["../../src/server/controllers/professional-controller.js"],"names":["load","req","res","next","userId","get","then","professional","catch","e","json","getAppointments","queryObj","_id","startDate","$gt","Date","query","month","year","$lt","find","populate","sort","exec","appointments","create","exists","body","email","existingProfessional","err","FORBIDDEN","firstname","lastname","title","organization","status","save","getByEmail","existingUser","length","savedProfessional","update","savedObj","toObject","savedUser","role","roles","Professional","password","defaultPassword","list","limit","skip","buildQuery","$or","createdAt","professionals","Object","keys","array","key","obj","push","uploadPhoto","console","log","file","imageUrl","location","remove","deletedProfessional"],"mappings":"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","file":"professional-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { Professional, User, Appointment } from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load professional and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Professional.get(userId)\r\n    .then((professional) => {\r\n        req.professional = professional;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional\r\n* @returns {Professional}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.professional);\r\n}\r\n\r\n/**\r\n* Get professional's Appointments\r\n* @returns {Appointment[]}\r\n*/\r\nfunction getAppointments(req, res, next) {\r\n    let queryObj = {\r\n        professional: req.professional._id,\r\n        startDate: {$gt: new Date()}\r\n    };\r\n    if(req.query.month){\r\n        queryObj.startDate = {\r\n            $gt: new Date(req.query.year,req.query.month,1),\r\n            $lt: new Date(req.query.year,req.query.month,31) \r\n        }\r\n    }\r\n    Appointment.find(queryObj)\r\n        .populate('client')\r\n        .sort('startDate')\r\n        .exec()\r\n        .then(appointments => res.json(appointments));\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as professional.  If not, it creates a new User with the email provided and a default password. Then creates the Professional to reside in the new user\r\n* @returns {Professional}\r\n*/\r\nfunction create(req, res, next) {\r\n\r\n    return Professional.exists(req.body.email).then(existingProfessional =>{\r\n        if(existingProfessional){\r\n            const err = new APIError('Error: Professional Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            return new Professional({\r\n                firstname: req.body.firstname,\r\n                lastname: req.body.lastname,\r\n                email: req.body.email,\r\n                title: req.body.title,\r\n                organization: req.body.organization,\r\n                status: 1\r\n            }).save().then(savedProfessional =>{\r\n                //check if user already exists\r\n                return User.getByEmail(req.body.email)\r\n                .then(existingUser=> {\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.professional = savedProfessional._id;\r\n                        return existingUser.update().then(savedUser => {\r\n                            //return userid with professional\r\n                            let savedObj = savedProfessional.toObject();\r\n                            savedObj.userId = savedUser._id;\r\n                            return res.json(savedObj);\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach professional\r\n                        return new User({\r\n                            role: Constants.roles.Professional,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            professional: savedProfessional._id\r\n                        }).save().then(savedUser => {\r\n                            //return userid with professional\r\n                            let savedObj = savedProfessional.toObject();\r\n                            savedObj.userId = savedUser._id;\r\n                            return res.json(savedObj);\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing professional\r\n* @property {string} req.body.email - The email of professional.\r\n* @returns {Professional}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    let professional = req.professional;\r\n    \r\n    // professional.email = req.body.email;\r\n    professional.firstname = req.body.firstname;\r\n    professional.lastname = req.body.lastname;\r\n    professional.title = req.body.title;\r\n\r\n    return professional.save()\r\n    .then(savedProfessional => res.json(savedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional list.\r\n* @property {number} req.query.skip - Number of professionals to be skipped.\r\n* @property {number} req.query.limit - Limit number of professionals to be returned.\r\n* @returns {Professional[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 50, skip = 0 } = req.query;\r\n    let queryObj = buildQuery(req);\r\n    \r\n    return Professional.find(queryObj.length > 0 ? {$or: queryObj} : {})\r\n    .sort({ createdAt: -1 })\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .then(professionals => res.json(professionals))\r\n    .catch(e => next(e));\r\n}\r\n\r\nfunction buildQuery(req){\r\n    if (Object.keys(req.query).length === 0) return [];\r\n    var array = [];\r\n    for (var key in req.query) {\r\n        // if (_.indexOf(dateKeys, key) > -1) {\r\n        //     if (key == 'startDate') {\r\n        //         array.push({ createdAt: { $gt: req.query[key] } });\r\n        //     }\r\n        //     if (key == 'endDate') array.push({ createdAt: { $lt: req.query[key] } });\r\n        // } else {\r\n            var obj = {};\r\n            obj[key] = req.query[key];\r\n            array.push(obj);\r\n        // }\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction uploadPhoto(req,res,next){\r\n    let professional = req.professional;\r\n    console.log(req.file)\r\n    professional.imageUrl = req.file.location;\r\n\r\n    return professional.save()\r\n    .then(savedProfessional => res.json(savedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete professional.\r\n* @returns {Professional}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const professional = req.professional;\r\n    return professional.remove()\r\n    .then(deletedProfessional => res.json(deletedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getAppointments, uploadPhoto };\r\n"]}