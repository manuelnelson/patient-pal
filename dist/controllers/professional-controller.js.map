{"version":3,"sources":["../../src/server/controllers/professional-controller.js"],"names":["load","req","res","next","userId","get","then","professional","catch","e","json","getAppointments","find","_id","populate","sort","exec","appointments","create","getByEmail","body","email","existingProfessional","err","FORBIDDEN","firstName","lastName","status","save","existingUser","length","savedProfessional","update","user","role","roles","Client","password","defaultPassword","insurance","sex","birth","list","query","limit","skip","professionals","remove","deletedProfessional"],"mappings":"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","file":"professional-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { Professional, User, Appointment } from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load professional and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Professional.get(userId)\r\n    .then((professional) => {\r\n        req.professional = professional;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional\r\n* @returns {Professional}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.professional);\r\n}\r\n\r\n/**\r\n* Get professional's Appointments\r\n* @returns {Appointment[]}\r\n*/\r\nfunction getAppointments(req, res, next) {\r\n    Appointment.find({professional: req.professional._id})\r\n        .populate('client')\r\n        .sort('startDate')\r\n        .exec()\r\n        .then(appointments => res.json(appointments));\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as professional.  If not, it creates a new User with the email provided and a default password. Then creates the Professional to reside in the new user\r\n* @returns {Professional}\r\n*/\r\nfunction create(req, res, next) {\r\n    Professional.getByEmail(req.body.email).then(existingProfessional =>{\r\n        if(existingProfessional){\r\n            const err = new APIError('Error: Professional Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            const professional = new Professional({\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                email: req.body.email,\r\n                status: 1\r\n            }).save().then(savedProfessional =>{\r\n                //check if user already exists\r\n                User.getByEmail(req.body.email)\r\n                .then(existingUser=> {\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.professional = savedProfessional._id;\r\n                        existingUser.update().then(savedUser => {\r\n                            return res.json(savedProfessional);\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach professional\r\n                        const user = new User({\r\n                            role: Constants.roles.Client,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            professional: savedProfessional._id\r\n                        }).save().then(savedUser => {\r\n                            return res.json(savedProfessional);\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing professional\r\n* @property {string} req.body.email - The email of professional.\r\n* @returns {Professional}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    const professional = req.professional;\r\n    professional.email = req.body.email;\r\n    professional.firstName = req.body.firstName;\r\n    professional.lastName = req.body.lastName;\r\n    professional.insurance = req.body.insurance;\r\n    professional.sex = req.body.sex;\r\n    professional.birth = req.body.birth;\r\n\r\n    professional.save()\r\n    .then(savedProfessional => res.json(savedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional list.\r\n* @property {number} req.query.skip - Number of professionals to be skipped.\r\n* @property {number} req.query.limit - Limit number of professionals to be returned.\r\n* @returns {Professional[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 50, skip = 0 } = req.query;\r\n    Professional.list({ limit, skip })\r\n    .then(professionals => res.json(professionals))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete professional.\r\n* @returns {Professional}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const professional = req.professional;\r\n    professional.remove()\r\n    .then(deletedProfessional => res.json(deletedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getAppointments };\r\n"]}