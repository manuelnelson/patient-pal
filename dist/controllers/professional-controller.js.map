{"version":3,"sources":["../../src/server/controllers/professional-controller.js"],"names":["load","req","res","next","userId","get","then","professional","catch","e","json","getAppointments","find","_id","populate","sort","exec","appointments","create","getByEmail","body","email","existingProfessional","err","FORBIDDEN","firstname","lastname","title","organization","status","save","existingUser","length","savedProfessional","update","role","roles","Professional","password","defaultPassword","console","log","list","query","limit","skip","queryObj","buildQuery","$or","createdAt","professionals","Object","keys","array","key","obj","push","remove","deletedProfessional"],"mappings":"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","file":"professional-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { Professional, User, Appointment } from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load professional and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Professional.get(userId)\r\n    .then((professional) => {\r\n        req.professional = professional;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional\r\n* @returns {Professional}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.professional);\r\n}\r\n\r\n/**\r\n* Get professional's Appointments\r\n* @returns {Appointment[]}\r\n*/\r\nfunction getAppointments(req, res, next) {\r\n    Appointment.find({professional: req.professional._id})\r\n        .populate('client')\r\n        .sort('startDate')\r\n        .exec()\r\n        .then(appointments => res.json(appointments));\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as professional.  If not, it creates a new User with the email provided and a default password. Then creates the Professional to reside in the new user\r\n* @returns {Professional}\r\n*/\r\nfunction create(req, res, next) {\r\n\r\n    return Professional.getByEmail(req.body.email).then(existingProfessional =>{\r\n        if(existingProfessional){\r\n            const err = new APIError('Error: Professional Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            return new Professional({\r\n                firstname: req.body.firstname,\r\n                lastname: req.body.lastname,\r\n                email: req.body.email,\r\n                title: req.body.title,\r\n                organization: req.body.organization,\r\n                status: 1\r\n            }).save().then(savedProfessional =>{\r\n                //check if user already exists\r\n                return User.getByEmail(req.body.email)\r\n                .then(existingUser=> {\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.professional = savedProfessional._id;\r\n                        return existingUser.update().then(savedUser => {\r\n                            return res.json(savedProfessional);\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach professional\r\n                        return new User({\r\n                            role: Constants.roles.Professional,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            professional: savedProfessional._id\r\n                        }).save().then(savedUser => {\r\n                            return res.json(savedProfessional);\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing professional\r\n* @property {string} req.body.email - The email of professional.\r\n* @returns {Professional}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    let professional = req.professional;\r\n    console.log(req.professional)\r\n    \r\n    // professional.email = req.body.email;\r\n    professional.firstname = req.body.firstname;\r\n    professional.lastname = req.body.lastname;\r\n    professional.title = req.body.title;\r\n    // professional.insurance = req.body.insurance;\r\n    // professional.sex = req.body.sex;\r\n    // professional.birth = req.body.birth;\r\n\r\n    return professional.save()\r\n    .then(savedProfessional => {console.log('test'); res.json(savedProfessional);})\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get professional list.\r\n* @property {number} req.query.skip - Number of professionals to be skipped.\r\n* @property {number} req.query.limit - Limit number of professionals to be returned.\r\n* @returns {Professional[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 50, skip = 0 } = req.query;\r\n    let queryObj = buildQuery(req);\r\n    \r\n    return Professional.find(queryObj.length > 0 ? {$or: queryObj} : {})\r\n    .sort({ createdAt: -1 })\r\n    .skip(skip)\r\n    .limit(limit)\r\n    .then(professionals => res.json(professionals))\r\n    .catch(e => next(e));\r\n}\r\n\r\nfunction buildQuery(req){\r\n    if (Object.keys(req.query).length === 0) return [];\r\n    var array = [];\r\n    for (var key in req.query) {\r\n        // if (_.indexOf(dateKeys, key) > -1) {\r\n        //     if (key == 'startDate') {\r\n        //         array.push({ createdAt: { $gt: req.query[key] } });\r\n        //     }\r\n        //     if (key == 'endDate') array.push({ createdAt: { $lt: req.query[key] } });\r\n        // } else {\r\n            var obj = {};\r\n            obj[key] = req.query[key];\r\n            array.push(obj);\r\n        // }\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n* Delete professional.\r\n* @returns {Professional}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const professional = req.professional;\r\n    professional.remove()\r\n    .then(deletedProfessional => res.json(deletedProfessional))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getAppointments };\r\n"]}