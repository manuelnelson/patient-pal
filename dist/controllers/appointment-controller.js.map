{"version":3,"sources":["../../src/server/controllers/appointment-controller.js"],"names":["load","req","res","next","id","get","then","appointment","catch","e","json","create","body","save","savedAppointment","update","prop","list","query","limit","skip","buildQuery","parseInt","populate","sort","appointments","dateKeys","Object","keys","length","find","seriesObj","key","obj","indexOf","$gt","$lt","remove","deletedAppointment"],"mappings":"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","file":"appointment-controller.js","sourcesContent":["import {Appointment} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n* Load appointment and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    Appointment.get(id)\r\n    .then((appointment) => {\r\n        req.appointment = appointment;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get appointment\r\n* @returns {Appointment}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.appointment);\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as appointment.  If not, it creates a new User with the email provided and a default password. Then creates the Appointment to reside in the new user\r\n* @returns {Appointment}\r\n*/\r\nfunction create(req, res, next) {\r\n    const appointment = new Appointment(req.body)\r\n        .save()\r\n        .then(savedAppointment => res.json(savedAppointment))\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing appointment\r\n* @returns {Appointment}\r\n*/\r\nfunction update(req, res, next) {\r\n    const appointment = req.appointment;\r\n    for(let prop in req.appointment){\r\n        appointment[prop] = req.appointment[prop];\r\n    }\r\n    appointment.save()\r\n    .then(savedAppointment => res.json(savedAppointment))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get appointment list.\r\n* @property {number} req.query.skip - Number of appointments to be skipped.\r\n* @property {number} req.query.limit - Limit number of appointments to be returned.\r\n* @returns {Appointment[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 10, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;    \r\n    let query = Appointment;\r\n    query = buildQuery(req, query);\r\n    return query.skip(parseInt(skip)).limit(parseInt(limit))\r\n    .populate('client professional')\r\n    .sort('startDate')\r\n    .then(appointments => res.json(appointments))\r\n    .catch(e => next(e));\r\n}\r\n\r\n//list of fields that are relationships of type many\r\nlet dateKeys = ['startDate', 'endDate'];\r\n\r\n//builds a query for \r\nfunction buildQuery(req, query){\r\n    if(Object.keys(req.query).length === 0)\r\n        return query.find();\r\n    //otherwise it runs it as an OR statement\r\n    let seriesObj = {};\r\n    for(let key in req.query){\r\n        let obj = {};\r\n        if(_.indexOf(dateKeys, key) > -1){\r\n            if(key == 'startDate')\r\n                obj[key] = {$gt: req.query[key]};\r\n            if(key == 'endDate')\r\n                obj[key] = {$lt: req.query[key]};\r\n            query = query.find(obj);    \r\n        } else{\r\n            seriesObj[key] = req.query[key];\r\n        }\r\n    }\r\n    if(Object.keys(seriesObj).length > 0)\r\n        query = query.find(seriesObj);\r\n    return query;\r\n}\r\n\r\n\r\n/**\r\n* Delete appointment.\r\n* @returns {Appointment}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const appointment = req.appointment;\r\n    appointment.remove()\r\n    .then(deletedAppointment => res.json(deletedAppointment))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove };\r\n"]}