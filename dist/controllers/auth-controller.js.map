{"version":3,"sources":["../../src/server/controllers/auth-controller.js"],"names":["login","req","res","next","body","email","password","err","UNAUTHORIZED","getByEmail","then","existingUser","comparePassword","error","pwdIsValid","authToken","createToken","json","catch","e","updatePassword","params","user","save","savedUser","verifyToken","token","get","unsignedToken","verify","jwtSecret","locals","sessionUserEmail","sign","person","professional","client","organization","_id","role","firstname","lastname","organizationId","getRandomNumber","num","Math","random","AuthCtrl"],"mappings":"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","file":"auth-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport httpStatus from 'http-status';\r\nimport { User } from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport config from '../config';\r\n\r\n/**\r\n* Returns jwt token if valid username and password is provided\r\n* @param req\r\n* @param res\r\n* @param next\r\n* @returns {*} \r\n*/\r\nfunction login(req, res, next) {\r\n    if(!req.body.email || !req.body.password){\r\n        const err = new APIError('Authentication error: Email and password required', httpStatus.UNAUTHORIZED, true);\r\n        return next(err);\r\n    }\r\n    User.getByEmail(req.body.email, true)\r\n    .then(existingUser=>{\r\n        if(!existingUser){\r\n            const err = new APIError('Authentication error: Invalid Credentials', httpStatus.UNAUTHORIZED, true);\r\n            return next(err);\r\n        }\r\n        existingUser.comparePassword(req.body.password,function(error,pwdIsValid){\r\n            if(error){\r\n                const err = new APIError('Authentication error', httpStatus.UNAUTHORIZED, false);\r\n                return next(err);\r\n            }\r\n            if(!pwdIsValid){\r\n                const err = new APIError('Authentication error: Invalid Credentials ', httpStatus.UNAUTHORIZED, true);\r\n                return next(err);\r\n            }\r\n            let authToken  = createToken(existingUser);\r\n            return res.json(authToken);\r\n        })\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update user password\r\n* @property {string} req.body.email - The email of user.\r\n* @returns {User}\r\n*/\r\n\r\nfunction updatePassword(req, res, next) {\r\n    User.getByEmail(req.params.email, true)\r\n    .then((user) => {\r\n        user.password = req.body.password;\r\n        user.save()\r\n        .then(savedUser => res.json(savedUser))\r\n        .catch(e => next(e));\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Verifies Authorization token sent in API Request.  If valid, it returns the user email on the req.locals object.\r\n* If invalid, jwt throws an Authorization error\r\n* @param req\r\n* @param res\r\n* @returns {*}\r\n*/\r\nfunction verifyToken(req,res,next){\r\n    var token = req.get('Authorization');\r\n    var unsignedToken = jwt.verify(token,config.jwtSecret);\r\n    req.locals = {\r\n        sessionUserEmail: unsignedToken.email\r\n    };\r\n    next();\r\n}\r\n\r\n// creates the token from a user\r\nfunction createToken(user){\r\n    const token = jwt.sign({\r\n        email: user.email\r\n    }, config.jwtSecret);\r\n    var person = user.professional ? user.professional : user.client;\r\n    var organization = user.professional ? user.professional.organization : '';\r\n    return {\r\n        _id: person._id,\r\n        token,\r\n        email: user.email,\r\n        role: user.role,\r\n        firstname: user.professional ? user.professional.firstname : user.client.firstname,\r\n        lastname: user.professional ? user.professional.lastname : user.client.lastname,\r\n        organizationId: organization\r\n    };\r\n\r\n}\r\n\r\n/**\r\n* This is a protected route. Will return random number only if jwt token is provided in header.\r\n* @param req\r\n* @param res\r\n* @returns {*}\r\n*/\r\nfunction getRandomNumber(req, res) {\r\n    // req.user is assigned by jwt middleware if valid token is provided\r\n    return res.json({\r\n        user: req.user,\r\n        num: Math.random() * 100\r\n    });\r\n}\r\nlet AuthCtrl = { login, getRandomNumber, verifyToken, updatePassword, createToken };\r\nexport default AuthCtrl;\r\n"]}