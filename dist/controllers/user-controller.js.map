{"version":3,"sources":["../../src/server/controllers/user-controller.js"],"names":["load","req","res","next","id","get","then","user","catch","e","json","create","role","body","email","password","getByEmail","existingUser","err","UNAUTHORIZED","save","savedUser","roles","Professional","professional","status","savedProfessional","token","sign","jwtSecret","update","list","query","limit","skip","users","remove","deletedUser"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,EAA9B,EAAkC;AAC9B,iBAAKC,GAAL,CAASD,EAAT,EACCE,IADD,CACM,UAACC,IAAD,EAAU;AACZN,YAAIM,IAAJ,GAAWA,IAAX;AACA,eAAOJ,MAAP;AACH,KAJD,EAKCK,KALD,CAKO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KALP;AAMH;;AAED;;;;AAIA,SAASJ,GAAT,CAAaJ,GAAb,EAAkBC,GAAlB,EAAuB;AACnB,WAAOA,IAAIQ,IAAJ,CAAST,IAAIM,IAAb,CAAP;AACH;;AAED;;;;AAIA,SAASI,MAAT,CAAgBV,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,OAAO,iBAAS;AAClBK,cAAMX,IAAIY,IAAJ,CAASD,IADG;AAElBE,eAAOb,IAAIY,IAAJ,CAASC,KAFE;AAGlBC,kBAAUd,IAAIY,IAAJ,CAASE;AAHD,KAAT,CAAb;;AAMA;AACA,iBAAKC,UAAL,CAAgBT,KAAKO,KAArB,EACCR,IADD,CACM,wBAAc;AAChB,YAAGW,YAAH,EACA;AACI,gBAAMC,MAAM,uBAAa,2CAAb,EAA0D,qBAAWC,YAArE,EAAmF,IAAnF,CAAZ;AACA,mBAAOhB,KAAKe,GAAL,CAAP;AACH,SAJD,MAIO;AACHX,iBAAKa,IAAL,GACCd,IADD,CACM,qBAAa;AACf,oBAAGe,UAAUT,IAAV,IAAkB,oBAAUU,KAAV,CAAgBC,YAArC,EAAkD;AAC9C;AACA,wBAAMC,eAAe,yBAAiB;AAClCV,+BAAOb,IAAIY,IAAJ,CAASC,KADkB;AAElCW,gCAAQ;AAF0B,qBAAjB,EAGlBL,IAHkB,GAGXd,IAHW,CAGN,6BAAoB;AAC/Be,kCAAUG,YAAV,GAAyBE,iBAAzB;AACAL,kCAAUD,IAAV;AACH,qBANoB,CAArB;AAOH;AACD;AACA,oBAAMO,QAAQ,uBAAIC,IAAJ,CAAS;AACrBd,2BAAOO,UAAUP;AADI,iBAAT,EAEX,iBAAOe,SAFI,CAAd;AAGA,uBAAO3B,IAAIQ,IAAJ,CAAS;AACdiB,gCADc;AAEdb,2BAAOO,UAAUP,KAFH;AAGdF,0BAAMS,UAAUT;AAHF,iBAAT,CAAP;AAKH,aArBD,EAsBCJ,KAtBD,CAsBO;AAAA,uBAAKL,KAAKM,CAAL,CAAL;AAAA,aAtBP;AAuBH;AACJ,KA/BD,EAgCCD,KAhCD,CAgCO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAhCP;AAiCH;;AAED;;;;;AAKA,SAASqB,MAAT,CAAgB7B,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,OAAON,IAAIM,IAAjB;AACAA,SAAKO,KAAL,GAAab,IAAIY,IAAJ,CAASC,KAAtB;;AAEAP,SAAKa,IAAL,GACCd,IADD,CACM;AAAA,eAAaJ,IAAIQ,IAAJ,CAASW,SAAT,CAAb;AAAA,KADN,EAECb,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;AAED;;;;;;AAMA,SAASsB,IAAT,CAAc9B,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAAA,qBACOF,IAAI+B,KADX;AAAA,sCAClBC,KADkB;AAAA,QAClBA,KADkB,oCACV,EADU;AAAA,qCACNC,IADM;AAAA,QACNA,IADM,mCACC,CADD;;AAE1B,iBAAKH,IAAL,CAAU,EAAEE,YAAF,EAASC,UAAT,EAAV,EACC5B,IADD,CACM;AAAA,eAASJ,IAAIQ,IAAJ,CAASyB,KAAT,CAAT;AAAA,KADN,EAEC3B,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;AAED;;;;AAIA,SAAS2B,MAAT,CAAgBnC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,OAAON,IAAIM,IAAjB;AACAA,SAAK6B,MAAL,GACC9B,IADD,CACM;AAAA,eAAeJ,IAAIQ,IAAJ,CAAS2B,WAAT,CAAf;AAAA,KADN,EAEC7B,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;kBAEc,EAAET,UAAF,EAAQK,QAAR,EAAaM,cAAb,EAAqBmB,cAArB,EAA6BC,UAA7B,EAAmCK,cAAnC,E","file":"user-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {User, Professional} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport config from '../config';\r\nimport constants from '../lib/constants';\r\n\r\n/**\r\n* Load user and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    User.get(id)\r\n    .then((user) => {\r\n        req.user = user;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get user\r\n* @returns {User}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.user);\r\n}\r\n\r\n/**\r\n* Create new user\r\n* @returns {User}\r\n*/\r\nfunction create(req, res, next) {\r\n    const user = new User({\r\n        role: req.body.role,\r\n        email: req.body.email,\r\n        password: req.body.password\r\n    });\r\n\r\n    //check if user already exists\r\n    User.getByEmail(user.email)\r\n    .then(existingUser=>{\r\n        if(existingUser)\r\n        {\r\n            const err = new APIError('Authentication error: User Already Exists', httpStatus.UNAUTHORIZED, true);\r\n            return next(err);\r\n        } else {\r\n            user.save()\r\n            .then(savedUser => {\r\n                if(savedUser.role == constants.roles.Professional){\r\n                    //create the professional asynchronously\r\n                    const professional = new Professional({\r\n                        email: req.body.email,\r\n                        status: 1\r\n                    }).save().then(savedProfessional =>{\r\n                        savedUser.professional = savedProfessional;\r\n                        savedUser.save();\r\n                    });\r\n                }\r\n                //log user in\r\n                const token = jwt.sign({\r\n                  email: savedUser.email\r\n                }, config.jwtSecret);\r\n                return res.json({\r\n                  token,\r\n                  email: savedUser.email,\r\n                  role: savedUser.role\r\n                });\r\n            })\r\n            .catch(e => next(e));\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing user\r\n* @property {string} req.body.email - The email of user.\r\n* @returns {User}\r\n*/\r\nfunction update(req, res, next) {\r\n    const user = req.user;\r\n    user.email = req.body.email;\r\n\r\n    user.save()\r\n    .then(savedUser => res.json(savedUser))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get user list.\r\n* @property {number} req.query.skip - Number of users to be skipped.\r\n* @property {number} req.query.limit - Limit number of users to be returned.\r\n* @returns {User[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 50, skip = 0 } = req.query;\r\n    User.list({ limit, skip })\r\n    .then(users => res.json(users))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete user.\r\n* @returns {User}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const user = req.user;\r\n    user.remove()\r\n    .then(deletedUser => res.json(deletedUser))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove };\r\n"]}