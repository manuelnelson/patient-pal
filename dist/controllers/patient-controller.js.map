{"version":3,"sources":["../../src/server/controllers/patient-controller.js"],"names":["load","req","res","next","userId","get","then","patient","catch","e","json","create","getByEmail","body","email","existingPatient","err","FORBIDDEN","firstname","lastname","birth","sex","insurance","status","save","findOneAndUpdate","locals","sessionUserEmail","$push","patients","savedPatient","result","existingUser","length","_id","update","user","role","roles","Client","password","defaultPassword","list","query","limit","skip","remove","deletedPatient"],"mappings":"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","file":"patient-controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {Patient, Professional, User} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load patient and append to req.\r\n*/\r\nfunction load(req, res, next, userId) {\r\n    Patient.get(userId)\r\n    .then((patient) => {\r\n        req.patient = patient;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get patient\r\n* @returns {Patient}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.patient);\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as patient.  If not, it creates a new User with the email provided and a default password. Then creates the Patient to reside in the new user\r\n* @returns {Patient}\r\n*/\r\nfunction create(req, res, next) {\r\n    Patient.getByEmail(req.body.email).then(existingPatient =>{\r\n        if(existingPatient){\r\n            const err = new APIError('Error: Patient Already Exists', httpStatus.FORBIDDEN, true);\r\n            return next(err);\r\n        }else{\r\n            const patient = new Patient({\r\n                firstname: req.body.firstname,\r\n                lastname: req.body.lastname,\r\n                email: req.body.email,\r\n                birth: req.body.birth,\r\n                sex: req.body.sex,\r\n                insurance: req.body.insurance,\r\n                status: 1\r\n            }).save().then(savedPatient =>{\r\n                //asynchronously add patient to current professional\r\n                Professional.findOneAndUpdate({email: req.locals.sessionUserEmail}, {$push:{patients:savedPatient}}, (err,result) =>{});\r\n\r\n                //check if user already exists\r\n                User.getByEmail(req.body.email)\r\n                .then(existingUser=>{\r\n                    if(existingUser && existingUser.length > 0)\r\n                    {\r\n                        existingUser.patient = savedPatient._id;\r\n                        existingUser.update().then(savedUser => {\r\n                            return res.json(savedPatient);\r\n                        });\r\n                    } else {\r\n                        //create new user.  Attach patient\r\n                        const user = new User({\r\n                            role: Constants.roles.Client,\r\n                            email: req.body.email,\r\n                            password: Constants.defaultPassword,\r\n                            patient: savedPatient._id\r\n                        }).save().then(savedUser => {\r\n                            return res.json(savedPatient);\r\n                        })\r\n                        .catch(e => next(e));\r\n                    }\r\n                })\r\n                .catch(e => next(e));\r\n            })\r\n            .catch(e => next(e));\r\n\r\n        }\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing patient\r\n* @property {string} req.body.email - The email of patient.\r\n* @returns {Patient}\r\n*/\r\nfunction update(req, res, next) {\r\n    //we may have to get user based off this.\r\n    const patient = req.patient;\r\n    patient.email = req.body.email;\r\n    patient.firstname = req.body.firstname;\r\n    patient.lastname = req.body.lastname;\r\n    patient.insurance = req.body.insurance;\r\n    patient.sex = req.body.sex;\r\n    patient.birth = req.body.birth;\r\n\r\n    patient.save()\r\n    .then(savedPatient => res.json(savedPatient))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get patient list.\r\n* @property {number} req.query.skip - Number of patients to be skipped.\r\n* @property {number} req.query.limit - Limit number of patients to be returned.\r\n* @returns {Patient[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    Patient.list({ limit, skip })\r\n    .then(patients => res.json(patients))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete patient.\r\n* @returns {Patient}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const patient = req.patient;\r\n    patient.remove()\r\n    .then(deletedPatient => res.json(deletedPatient))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove };\r\n"]}