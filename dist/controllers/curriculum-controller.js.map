{"version":3,"sources":["../../src/server/controllers/curriculum-controller.js"],"names":["load","req","res","next","id","get","then","curriculum","catch","e","create","body","save","savedCurriculum","update","prop","populate","populatedCurriculum","list","query","limit","skip","queryObj","buildQuery","find","length","$or","sort","createdAt","curriculums","Object","keys","array","key","obj","push","remove","deletedCurriculum","search","regex","RegExp","params","keyword","name","$regex","organization","json"],"mappings":"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","file":"curriculum-controller.js","sourcesContent":["import {Curriculum} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load curriculum and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    Curriculum.get(id)\r\n    .then((curriculum) => {\r\n        req.curriculum = curriculum;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get curriculum\r\n* @returns {Curriculum}\r\n*/\r\nfunction get(req, res) {\r\n    return req.curriculum;\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as curriculum.  If not, it creates a new User with the email provided and a default password. Then creates the Curriculum to reside in the new user\r\n* @returns {Curriculum}\r\n*/\r\nfunction create(req, res, next) {\r\n   return new Curriculum(req.body)\r\n        .save()\r\n        .then(savedCurriculum => savedCurriculum)\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing curriculum\r\n* @returns {Curriculum}\r\n*/\r\nfunction update(req, res, next) {\r\n    const curriculum = req.curriculum;\r\n    for(let prop in req.body){\r\n        curriculum[prop] = req.body[prop];\r\n    }\r\n    return curriculum.save()\r\n    .then(savedCurriculum => {\r\n        return Curriculum.populate(savedCurriculum,'curriculumCategory')\r\n                            .then(populatedCurriculum => populatedCurriculum)\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get curriculum list.\r\n* @property {number} req.query.skip - Number of curriculums to be skipped.\r\n* @property {number} req.query.limit - Limit number of curriculums to be returned.\r\n* @returns {Curriculum[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;    \r\n    let queryObj = buildQuery(req);\r\n        \r\n    return Curriculum.find(queryObj.length > 0 ? {$or: queryObj} : {})\r\n        .sort({ createdAt: -1 })\r\n        .populate('curriculumCategory')\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .then(curriculums => curriculums)\r\n        .catch(e => next(e));\r\n}\r\n\r\nfunction buildQuery(req){\r\n    if (Object.keys(req.query).length === 0) return [];\r\n    var array = [];\r\n    for (var key in req.query) {\r\n        // if (_.indexOf(dateKeys, key) > -1) {\r\n        //     if (key == 'startDate') {\r\n        //         array.push({ createdAt: { $gt: req.query[key] } });\r\n        //     }\r\n        //     if (key == 'endDate') array.push({ createdAt: { $lt: req.query[key] } });\r\n        // } else {\r\n            var obj = {};\r\n            obj[key] = req.query[key];\r\n            array.push(obj);\r\n        // }\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n* Delete curriculum.\r\n* @returns {Curriculum}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const curriculum = req.curriculum;\r\n    return curriculum.remove()\r\n    .then(deletedCurriculum => deletedCurriculum)\r\n    .catch(e => next(e));\r\n}\r\n/**\r\n* Get skill\r\n* @returns {Skill}\r\n* https://medium.com/@apurvashastry/build-a-cool-database-search-using-these-mongodb-full-text-search-features-on-mongoose-cf2803257f9\r\n*/\r\nfunction search(req, res, next) {\r\n    var regex = new RegExp(req.params.keyword,'ig')\r\n    Curriculum.find({\r\n        name: {\r\n            $regex: regex\r\n        },\r\n        organization: req.query.organization\r\n    })\r\n    .then((curriculums) => res.json(curriculums))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, search };\r\n"]}