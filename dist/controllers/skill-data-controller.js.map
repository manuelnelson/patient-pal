{"version":3,"sources":["../../src/server/controllers/skill-data-controller.js"],"names":["load","req","res","next","id","get","then","skillData","catch","e","create","body","save","savedSkillData","update","prop","dateKeys","clientCurriculumKeys","list","query","limit","skip","buildQuery","populate","path","sort","trialNumber","parseInt","exec","skillDatas","listReport","clientId","client","queryArray","buildQueryObj","find","ids","clientCurriculums","map","curriculum","_id","push","clientCurriculum","$in","$and","console","log","Object","keys","length","array","key","indexOf","createdAt","$gt","$lt","obj","remove","deletedSkillData"],"mappings":"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","file":"skill-data-controller.js","sourcesContent":["import {SkillData, ClientCurriculum} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport _ from 'lodash';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load skillData and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    SkillData.get(id)\r\n    .then((skillData) => {\r\n        req.skillData = skillData;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get skillData\r\n* @returns {SkillData}\r\n*/\r\nfunction get(req, res) {\r\n    return (req.skillData);\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as skillData.  If not, it creates a new User with the email provided and a default password. Then creates the SkillData to reside in the new user\r\n* @returns {SkillData}\r\n*/\r\nfunction create(req, res, next) {\r\n    const skillData = new SkillData(req.body)\r\n        .save()\r\n        .then(savedSkillData => (savedSkillData))\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing skillData\r\n* @returns {SkillData}\r\n*/\r\nfunction update(req, res, next) {\r\n    const skillData = req.skillData;\r\n    for(let prop in req.skillData){\r\n        skillData[prop] = req.skillData[prop];\r\n    }\r\n    skillData.save()\r\n    .then(savedSkillData => (savedSkillData))\r\n    .catch(e => next(e));\r\n}\r\nlet dateKeys = ['startDate', 'endDate'];\r\nlet clientCurriculumKeys = ['client'];\r\n\r\n/**\r\n* Get skillData list.\r\n* @property {number} req.query.skip - Number of skillDatas to be skipped.\r\n* @property {number} req.query.limit - Limit number of skillDatas to be returned.\r\n* @returns {SkillData[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;\r\n    let query = SkillData;\r\n    query = buildQuery(req, query);\r\n    return query.populate('skill')\r\n        .populate( {path:'clientCurriculum', populate: {path: 'curriculum client'}})\r\n        .sort({ trialNumber: -1 })\r\n        .skip(parseInt(skip)).limit(parseInt(limit))\r\n        .exec()\r\n        .then(skillDatas => skillDatas)\r\n        .catch(e => next(e));\r\n}\r\n\r\n//this query is specific enough i want to separate it out from rest of traditional REST responses\r\nfunction listReport(req, res, next){\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;\r\n    //if we are searching by client, we need to do a nested query by client curriculum\r\n    let clientId = req.query.client ? req.query.client : null;\r\n    delete req.query.client;\r\n\r\n    let query = SkillData;\r\n    let queryArray = buildQueryObj(req, query);\r\n    return ClientCurriculum.find({client: clientId}).exec()\r\n        .then(clientCurriculums => {\r\n            let ids = clientCurriculums.map(curriculum => curriculum._id);  \r\n            queryArray.push({clientCurriculum: {$in: ids}});\r\n            query = query.find({$and: queryArray});\r\n            console.log(queryArray)\r\n            return query.populate('skill')\r\n                .populate( {path:'clientCurriculum', populate: {path: 'curriculum client'}})\r\n                .sort({ trialNumber: -1 })\r\n                .skip(parseInt(skip)).limit(parseInt(limit))\r\n                .exec()\r\n                .then(skillDatas => skillDatas)\r\n                .catch(e => next(e));\r\n        })        \r\n}\r\n\r\n//list of fields that are relationships of type many\r\n//builds a query for \r\nfunction buildQueryObj(req, query){\r\n    if(Object.keys(req.query).length === 0)\r\n        return [];\r\n    let array = [];\r\n    for(let key in req.query){\r\n        if(_.indexOf(dateKeys, key) > -1){\r\n            if(key == 'startDate'){\r\n                array.push({createdAt: {$gt: req.query[key]}});\r\n            }                \r\n            if(key == 'endDate')\r\n                array.push({createdAt: {$lt: req.query[key]}});\r\n        } \r\n        else{\r\n            let obj = {};\r\n            obj[key] = req.query[key];\r\n            array.push(obj);\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\n//builds a query for \r\nfunction buildQuery(req, query){\r\n    if(Object.keys(req.query).length === 0)\r\n        return query.find();\r\n    for(let key in req.query){\r\n        let obj = {};\r\n        if(_.indexOf(dateKeys, key) > -1){\r\n            if(key == 'startDate')\r\n                obj[key] = {$gt: req.query[key]};\r\n            if(key == 'endDate')\r\n                obj[key] = {$lt: req.query[key]};\r\n            query = query.find(obj);    \r\n        } else{\r\n            obj[key] = req.query[key];\r\n        }\r\n    }    \r\n    return query.find(obj);\r\n}\r\n\r\n\r\n/**\r\n* Delete skillData.\r\n* @returns {SkillData}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const skillData = req.skillData;\r\n    skillData.remove()\r\n    .then(deletedSkillData => (deletedSkillData))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, listReport };\r\n"]}