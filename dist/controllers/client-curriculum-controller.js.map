{"version":3,"sources":["../../src/server/controllers/client-curriculum-controller.js"],"names":["load","req","res","next","id","get","then","clientCurriculum","catch","e","getByClient","find","client","params","clientId","populate","sort","exec","clientCurriculums","json","create","body","save","savedClientCurriculum","update","prop","list","query","limit","skip","remove","deletedClientCurriculum"],"mappings":"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","file":"client-curriculum-controller.js","sourcesContent":["import {ClientCurriculum} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load clientCurriculum and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    ClientCurriculum.get(id)    \r\n    .then((clientCurriculum) => {\r\n        req.clientCurriculum = clientCurriculum;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Load clientCurriculum and append to req.\r\n*/\r\nfunction getByClient(req, res, next) {\r\n    ClientCurriculum.find({client: req.params.clientId})\r\n    .populate('client appointment curriculum')\r\n    .sort('-createdAt')\r\n    .exec()    \r\n    .then((clientCurriculums) => res.json(clientCurriculums))\r\n    .catch(e => next(e));\r\n}\r\n\r\n\r\n/**\r\n* Get clientCurriculum\r\n* @returns {ClientCurriculum}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.clientCurriculum);\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as clientCurriculum.  If not, it creates a new User with the email provided and a default password. Then creates the ClientCurriculum to reside in the new user\r\n* @returns {ClientCurriculum}\r\n*/\r\nfunction create(req, res, next) {\r\n    const clientCurriculum = new ClientCurriculum(req.body)\r\n        .save()\r\n        .then(savedClientCurriculum => res.json(savedClientCurriculum))\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing clientCurriculum\r\n* @returns {ClientCurriculum}\r\n*/\r\nfunction update(req, res, next) {\r\n    const clientCurriculum = req.clientCurriculum;\r\n    for(let prop in req.clientCurriculum){\r\n        clientCurriculum[prop] = req.clientCurriculum[prop];\r\n    }\r\n    clientCurriculum.save()\r\n    .then(savedClientCurriculum => res.json(savedClientCurriculum))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get clientCurriculum list.\r\n* @property {number} req.query.skip - Number of clientCurriculums to be skipped.\r\n* @property {number} req.query.limit - Limit number of clientCurriculums to be returned.\r\n* @returns {ClientCurriculum[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    delete req.query.limit;\r\n    delete req.query.skip;\r\n    ClientCurriculum.list({ limit, skip, query: req.query }) \r\n    .then(clientCurriculums => res.json(clientCurriculums))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete clientCurriculum.\r\n* @returns {ClientCurriculum}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const clientCurriculum = req.clientCurriculum;\r\n    clientCurriculum.remove()\r\n    .then(deletedClientCurriculum => res.json(deletedClientCurriculum))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove, getByClient };\r\n"]}