{"version":3,"sources":["../../src/server/controllers/dtt-type-controller.js"],"names":["load","req","res","next","id","get","then","dttType","catch","e","json","create","body","save","savedDttType","update","prop","list","query","limit","skip","dttTypes","remove","deletedDttType"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;;AAGA,SAASA,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,EAA9B,EAAkC;AAC9B,oBAAQC,GAAR,CAAYD,EAAZ,EACCE,IADD,CACM,UAACC,OAAD,EAAa;AACfN,YAAIM,OAAJ,GAAcA,OAAd;AACA,eAAOJ,MAAP;AACH,KAJD,EAKCK,KALD,CAKO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KALP;AAMH;;AAED;;;;AAIA,SAASJ,GAAT,CAAaJ,GAAb,EAAkBC,GAAlB,EAAuB;AACnB,WAAOA,IAAIQ,IAAJ,CAAST,IAAIM,OAAb,CAAP;AACH;;AAED;;;;AAIA,SAASI,MAAT,CAAgBV,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,UAAU,oBAAYN,IAAIW,IAAhB,EACXC,IADW,GAEXP,IAFW,CAEN;AAAA,eAAgBJ,IAAIQ,IAAJ,CAASI,YAAT,CAAhB;AAAA,KAFM,EAGXN,KAHW,CAGL;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAHK,CAAhB;AAIH;;AAED;;;;AAIA,SAASM,MAAT,CAAgBd,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,UAAUN,IAAIM,OAApB;AACA,SAAI,IAAIS,IAAR,IAAgBf,IAAIM,OAApB,EAA4B;AACxBA,gBAAQS,IAAR,IAAgBf,IAAIM,OAAJ,CAAYS,IAAZ,CAAhB;AACH;AACDT,YAAQM,IAAR,GACCP,IADD,CACM;AAAA,eAAgBJ,IAAIQ,IAAJ,CAASI,YAAT,CAAhB;AAAA,KADN,EAECN,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;AAED;;;;;;AAMA,SAASQ,IAAT,CAAchB,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAAA,qBACOF,IAAIiB,KADX;AAAA,sCAClBC,KADkB;AAAA,QAClBA,KADkB,oCACV,EADU;AAAA,qCACNC,IADM;AAAA,QACNA,IADM,mCACC,CADD;;AAE1B,oBAAQH,IAAR,CAAa,EAAEE,YAAF,EAASC,UAAT,EAAb,EACCd,IADD,CACM;AAAA,eAAYJ,IAAIQ,IAAJ,CAASW,QAAT,CAAZ;AAAA,KADN,EAECb,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;AAED;;;;AAIA,SAASa,MAAT,CAAgBrB,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,QAAMI,UAAUN,IAAIM,OAApB;AACAA,YAAQe,MAAR,GACChB,IADD,CACM;AAAA,eAAkBJ,IAAIQ,IAAJ,CAASa,cAAT,CAAlB;AAAA,KADN,EAECf,KAFD,CAEO;AAAA,eAAKL,KAAKM,CAAL,CAAL;AAAA,KAFP;AAGH;;kBAEc,EAAET,UAAF,EAAQK,QAAR,EAAaM,cAAb,EAAqBI,cAArB,EAA6BE,UAA7B,EAAmCK,cAAnC,E","file":"dtt-type-controller.js","sourcesContent":["import {DttType} from '../models';\r\nimport APIError from '../lib/APIError';\r\nimport httpStatus from 'http-status';\r\nimport Constants from '../lib/constants';\r\n/**\r\n* Load dttType and append to req.\r\n*/\r\nfunction load(req, res, next, id) {\r\n    DttType.get(id)\r\n    .then((dttType) => {\r\n        req.dttType = dttType;\r\n        return next();\r\n    })\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get dttType\r\n* @returns {DttType}\r\n*/\r\nfunction get(req, res) {\r\n    return res.json(req.dttType);\r\n}\r\n\r\n/**\r\n* Checks if user exists with same email as dttType.  If not, it creates a new User with the email provided and a default password. Then creates the DttType to reside in the new user\r\n* @returns {DttType}\r\n*/\r\nfunction create(req, res, next) {\r\n    const dttType = new DttType(req.body)\r\n        .save()\r\n        .then(savedDttType => res.json(savedDttType))\r\n        .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Update existing dttType\r\n* @returns {DttType}\r\n*/\r\nfunction update(req, res, next) {\r\n    const dttType = req.dttType;\r\n    for(let prop in req.dttType){\r\n        dttType[prop] = req.dttType[prop];\r\n    }\r\n    dttType.save()\r\n    .then(savedDttType => res.json(savedDttType))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Get dttType list.\r\n* @property {number} req.query.skip - Number of dttTypes to be skipped.\r\n* @property {number} req.query.limit - Limit number of dttTypes to be returned.\r\n* @returns {DttType[]}\r\n*/\r\nfunction list(req, res, next) {\r\n    const { limit = 20, skip = 0 } = req.query;\r\n    DttType.list({ limit, skip })\r\n    .then(dttTypes => res.json(dttTypes))\r\n    .catch(e => next(e));\r\n}\r\n\r\n/**\r\n* Delete dttType.\r\n* @returns {DttType}\r\n*/\r\nfunction remove(req, res, next) {\r\n    const dttType = req.dttType;\r\n    dttType.remove()\r\n    .then(deletedDttType => res.json(deletedDttType))\r\n    .catch(e => next(e));\r\n}\r\n\r\nexport default { load, get, create, update, list, remove };\r\n"]}