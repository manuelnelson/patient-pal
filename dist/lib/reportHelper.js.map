{"version":3,"sources":["../../src/server/lib/reportHelper.js"],"names":["generateReport","reportName","data","res","filePath","join","__dirname","html","readFileSync","compiledTemplate","compile","withData","options","format","create","toBuffer","err","buffer","console","log","contentType","end","buildReportDataFromColumns","columns","skillData","dateTypes","map","skillDatum","dataObject","each","column","keys","key","split","value","isDate","altDateFormat","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,UAAxB,EAAmCC,IAAnC,EAAwCC,GAAxC,EAA4C;AACxC,QAAIC,WAAW,eAAKC,IAAL,CAAUC,SAAV,gBAAiCL,UAAjC,WAAf;AACA,QAAIM,OAAO,aAAGC,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAX;AACA,QAAIK,mBAAmB,qBAAWC,OAAX,CAAmBH,IAAnB,CAAvB;;AAEA,QAAII,WAAWF,iBAAiBP,IAAjB,CAAf;AACA,QAAIU,UAAU,EAAEC,QAAQ,QAAV,EAAd;AACA,sBAAIC,MAAJ,CAAWH,QAAX,EAAqBC,OAArB,EAA8BG,QAA9B,CAAuC,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpD,YAAID,GAAJ,EAAS,OAAOE,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AACTb,YAAIiB,WAAJ,CAAgB,iBAAhB;AACA,eAAOjB,IAAIkB,GAAJ,CAAQJ,MAAR,EAAe,QAAf,CAAP;AACA;AACH,KALD;AAMH;;AAED,SAASK,0BAAT,CAAoCC,OAApC,EAA6CC,SAA7C,EACA;AACIN,YAAQC,GAAR,CAAY,oBAAUM,SAAtB;AACD,WAAQ,iBAAEC,GAAF,CAAMF,SAAN,EAAiB,UAACG,UAAD,EAAgB;AACpC,YAAIC,aAAa;AACbJ,uBAAWG,UADE;AAEbJ,qBAAS;AAFI,SAAjB;;AAKA,yBAAEM,IAAF,CAAON,OAAP,EAAgB,UAACO,MAAD,EAAW;AACvB,gBAAIC,OAAOD,OAAOE,GAAP,CAAWC,KAAX,CAAiB,GAAjB,CAAX;AACA,gBAAIC,QAAQP,UAAZ;AACA,6BAAEE,IAAF,CAAOE,IAAP,EAAa,UAACC,GAAD,EAAS;AAClB,oBAAGE,KAAH,EACIA,QAAQA,MAAMF,GAAN,CAAR;AACP,aAHD;AAIA,gBAAGF,OAAOK,MAAV,EAAiB;AACbD,wBAAQ,sBAAOA,KAAP,EAAcrB,MAAd,CAAqB,oBAAUY,SAAV,CAAoBW,aAAzC,CAAR;AACH;AACDR,uBAAWL,OAAX,CAAmBc,IAAnB,CAAwB;AACpBH,uBAAOA;AADa,aAAxB;AAGH,SAbD;AAcA,eAAON,UAAP;AACH,KArBM,CAAR;AAsBF;;kBAEc,EAAC5B,8BAAD,EAAiBsB,sDAAjB,E","file":"reportHelper.js","sourcesContent":["import pdf from 'html-pdf';\r\nimport handlebars from 'handlebars';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport Constants from '../lib/constants';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nfunction generateReport(reportName,data,res){\r\n    let filePath = path.join(__dirname, `../views/${reportName}.html`)\r\n    let html = fs.readFileSync(filePath, 'utf8');\r\n    let compiledTemplate = handlebars.compile(html);\r\n\r\n    let withData = compiledTemplate(data);\r\n    let options = { format: 'Letter' };\r\n    pdf.create(withData, options).toBuffer((err, buffer) => {\r\n        if (err) return console.log(err);\r\n        res.contentType(\"application/pdf\");\r\n        return res.end(buffer,'binary')\r\n        //console.log(res); // { filename: '/app/businesscard.pdf' }\r\n    });\r\n}\r\n\r\nfunction buildReportDataFromColumns(columns, skillData)\r\n{\r\n    console.log(Constants.dateTypes)\r\n   return  _.map(skillData, (skillDatum) => {\r\n        let dataObject = {\r\n            skillData: skillDatum,\r\n            columns: []\r\n        };\r\n\r\n        _.each(columns, (column) =>{\r\n            let keys = column.key.split('.');\r\n            let value = skillDatum;\r\n            _.each(keys, (key) => {\r\n                if(value)\r\n                    value = value[key];\r\n            })\r\n            if(column.isDate){\r\n                value = moment(value).format(Constants.dateTypes.altDateFormat);\r\n            }\r\n            dataObject.columns.push({\r\n                value: value\r\n            })\r\n        })\r\n        return dataObject;\r\n    });\r\n}\r\n\r\nexport default {generateReport, buildReportDataFromColumns};"]}