{"version":3,"sources":["../../src/server/lib/helpers.js"],"names":["ExtendableError","message","status","isPublic","name","constructor","isOperational","Error","captureStackTrace","APIError","INTERNAL_SERVER_ERROR"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAEA;;;IAGMA,e;;;AACF,6BAAYC,OAAZ,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAAA;;AAAA,sIAC7BF,OAD6B;;AAEnC,cAAKG,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,cAAKH,OAAL,GAAeA,OAAf;AACA,cAAKC,MAAL,GAAcA,MAAd;AACA,cAAKC,QAAL,GAAgBA,QAAhB;AACA,cAAKG,aAAL,GAAqB,IAArB,CANmC,CAMR;AAC3BC,cAAMC,iBAAN,QAA8B,MAAKH,WAAL,CAAiBD,IAA/C;AAPmC;AAQtC;;;EATyBG,K;;AAY9B;;;;;;IAIME,Q;;;AACF;;;;;;AAMA,sBAAYR,OAAZ,EAAkF;AAAA,YAA7DC,MAA6D,uEAApD,qBAAWQ,qBAAyC;AAAA,YAAlBP,QAAkB,uEAAP,KAAO;;AAAA;;AAAA,mHACxEF,OADwE,EAC/DC,MAD+D,EACvDC,QADuD;AAEjF;;;EATkBH,e;;kBAYRS,Q","file":"helpers.js","sourcesContent":["import httpStatus from 'http-status';\r\n\r\n/**\r\n* @extends Error\r\n*/\r\nclass ExtendableError extends Error {\r\n    constructor(message, status, isPublic) {\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.message = message;\r\n        this.status = status;\r\n        this.isPublic = isPublic;\r\n        this.isOperational = true; // This is required since bluebird 4 doesn't append it anymore.\r\n        Error.captureStackTrace(this, this.constructor.name);\r\n    }\r\n}\r\n\r\n/**\r\n* Class representing an API error.\r\n* @extends ExtendableError\r\n*/\r\nclass APIError extends ExtendableError {\r\n    /**\r\n    * Creates an API error.\r\n    * @param {string} message - Error message.\r\n    * @param {number} status - HTTP status code of error.\r\n    * @param {boolean} isPublic - Whether the message should be visible to user or not.\r\n    */\r\n    constructor(message, status = httpStatus.INTERNAL_SERVER_ERROR, isPublic = false) {\r\n        super(message, status, isPublic);\r\n    }\r\n}\r\n\r\nexport default APIError;\r\n"]}