{"version":3,"sources":["../../src/server/models/client-curriculum.js"],"names":["clientCurriculumSchema","Schema","client","type","ObjectId","ref","required","curriculum","appointment","completed","Boolean","default","createdAt","Date","now","statics","get","id","findById","populate","path","exec","then","clientCurriculum","err","NOT_FOUND","reject","list","skip","limit","query","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,yBAAyB,IAAI,mBAASC,MAAb,CAAoB;AAC/CC,YAAQ;AACJC,cAAM,mBAASF,MAAT,CAAgBG,QADlB;AAEJC,aAAK,QAFD;AAGJC,kBAAS;AAHL,KADuC;AAM/CC,gBAAY;AACRJ,cAAM,mBAASF,MAAT,CAAgBG,QADd;AAERC,aAAK,YAFG;AAGRC,kBAAS;AAHD,KANmC;AAW/CE,iBAAa;AACTL,cAAM,mBAASF,MAAT,CAAgBG,QADb;AAETC,aAAK,aAFI;AAGTC,kBAAS;AAHA,KAXkC;AAgB/CG,eAAW;AACPN,cAAMO,OADC;AAEPC,iBAAS;AAFF,KAhBoC;AAoB/CC,eAAW;AACPT,cAAMU,IADC;AAEPF,iBAASE,KAAKC;AAFP;AApBoC,CAApB,CAA/B;;AA0BA;;;AAGAd,uBAAuBe,OAAvB,GAAiC;AAC7B;;;;;AAKAC,OAN6B,eAMzBC,EANyB,EAMrB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd;AACP;AACA;AAFO,SAGNE,QAHM,CAGG,EAACC,MAAK,YAAN,EAAoBD,UAAS,EAAEC,MAAM,QAAR,EAAkBD,UAAS,EAAEC,MAAM,oBAAR,EAA3B,EAA7B,EAHH,EAINC,IAJM,GAKNC,IALM,CAKD,UAACC,gBAAD,EAAsB;AACxB,gBAAIA,gBAAJ,EAAsB;AAClB,uBAAOA,gBAAP;AACH,aAFD,MAGI;AACA,oBAAMC,MAAM,uBAAa,kCAAb,EAAiD,qBAAWC,SAA5D,CAAZ;AACA,uBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ,SAbM,CAAP;AAcH,KArB4B;;;AAuB7B;;;;;;;AAOAG,QA9B6B,kBA8Bc;AAAA,uFAAJ,EAAI;AAAA,6BAApCC,IAAoC;AAAA,YAApCA,IAAoC,6BAA7B,CAA6B;AAAA,8BAA1BC,KAA0B;AAAA,YAA1BA,KAA0B,8BAAlB,EAAkB;AAAA,YAAdC,KAAc,QAAdA,KAAc;;AACvC,eAAO,KAAKC,IAAL,CAAUD,KAAV,EACNX,QADM,CACG,+BADH,EAENa,IAFM,CAED,EAAEpB,WAAW,CAAC,CAAd,EAFC,EAGNgB,IAHM,CAGDA,IAHC,EAINC,KAJM,CAIAA,KAJA,EAKNR,IALM,EAAP;AAMH;AArC4B,CAAjC;;kBAyCe,mBAASY,KAAT,CAAe,kBAAf,EAAmCjC,sBAAnC,C","file":"client-curriculum.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst clientCurriculumSchema = new mongoose.Schema({\r\n    client: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Client',\r\n        required:true\r\n    },\r\n    curriculum: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Curriculum',\r\n        required:true\r\n    },\r\n    appointment: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Appointment',\r\n        required:true\r\n    },\r\n    completed: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\nclientCurriculumSchema.statics = {\r\n    /**\r\n    * Get clientCurriculum\r\n    * @param {ObjectId} id - The objectId of clientCurriculum.\r\n    * @returns {Promise<clientCurriculum, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        //Deep populate FTW - TODO look at performance of this\r\n        //https://stackoverflow.com/questions/18867628/mongoose-deep-population-populate-a-populated-field\r\n        .populate({path:'curriculum', populate:{ path: 'skills', populate:{ path: 'targetType dttType'}}})\r\n        .exec()\r\n        .then((clientCurriculum) => {\r\n            if (clientCurriculum) {\r\n                return clientCurriculum;\r\n            }\r\n            else{\r\n                const err = new APIError('No such clientCurriculum exists!', httpStatus.NOT_FOUND);\r\n                return Promise.reject(err);    \r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List clientCurriculums in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of clientCurriculums to be skipped.\r\n    * @param {number} limit - Limit number of clientCurriculums to be returned.\r\n    * @param {number} query - Query of remaining properties\r\n    * @returns {Promise<clientCurriculum[]>}\r\n    */\r\n    list({ skip = 0, limit = 50, query } = {}) {\r\n        return this.find(query)\r\n        .populate('curriculum client appointment')        \r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n}; \r\n\r\n\r\nexport default mongoose.model('ClientCurriculum', clientCurriculumSchema);\r\n"]}