{"version":3,"sources":["../../src/server/models/masteredSkill.js"],"names":["masteredSkillSchema","Schema","skill","type","ObjectId","ref","client","curriculum","numberOfTrials","Number","started","Date","createdAt","default","now","statics","get","id","findById","exec","then","masteredSkill","err","NOT_FOUND","reject","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,sBAAsB,IAAI,mBAASC,MAAb,CAAoB;AAC5CC,WAAO;AACHC,cAAM,mBAASF,MAAT,CAAgBG,QADnB;AAEHC,aAAK;AAFF,KADqC;AAK5CC,YAAQ;AACJH,cAAM,mBAASF,MAAT,CAAgBG,QADlB;AAEJC,aAAK;AAFD,KALoC;AAS5CE,gBAAY;AACRJ,cAAM,mBAASF,MAAT,CAAgBG,QADd;AAERC,aAAK;AAFG,KATgC;AAa5CG,oBAAe;AACXL,cAAMM;AADK,KAb6B;AAgB5CC,aAAS;AACLP,cAAMQ;AADD,KAhBmC;AAmB5CC,eAAW;AACPT,cAAMQ,IADC;AAEPE,iBAASF,KAAKG;AAFP;AAnBiC,CAApB,CAA5B;;AAyBA;;;AAGAd,oBAAoBe,OAApB,GAA8B;AAC1B;;;;;AAKAC,OAN0B,eAMtBC,EANsB,EAMlB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,aAAD,EAAmB;AACrB,gBAAIA,aAAJ,EAAmB;AACf,uBAAOA,aAAP;AACH,aAFD,MAGI;AACA,oBAAMC,MAAM,uBAAa,+BAAb,EAA8C,qBAAWC,SAAzD,CAAZ;AACA,uBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ,SAVM,CAAP;AAWH,KAlByB;;;AAoB1B;;;;;;AAMAG,QA1B0B,kBA0BU;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEjB,WAAW,CAAC,CAAd,EADC,EAENc,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINR,IAJM,EAAP;AAKH;AAhCyB,CAA9B;;kBAoCe,mBAASW,KAAT,CAAe,eAAf,EAAgC9B,mBAAhC,C","file":"masteredSkill.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst masteredSkillSchema = new mongoose.Schema({\r\n    skill: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Skill'\r\n    },\r\n    client: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Client'\r\n    },\r\n    curriculum: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Curriculum'\r\n    },\r\n    numberOfTrials:{\r\n        type: Number\r\n    },\r\n    started: {\r\n        type: Date\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\nmasteredSkillSchema.statics = {\r\n    /**\r\n    * Get masteredSkill\r\n    * @param {ObjectId} id - The objectId of masteredSkill.\r\n    * @returns {Promise<masteredSkill, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((masteredSkill) => {\r\n            if (masteredSkill) {\r\n                return masteredSkill;\r\n            }\r\n            else{\r\n                const err = new APIError('No such masteredSkill exists!', httpStatus.NOT_FOUND);\r\n                return Promise.reject(err);    \r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List masteredSkills in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of masteredSkills to be skipped.\r\n    * @param {number} limit - Limit number of masteredSkills to be returned.\r\n    * @returns {Promise<masteredSkill[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('masteredSkill', masteredSkillSchema);\r\n"]}