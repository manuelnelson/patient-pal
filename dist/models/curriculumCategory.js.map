{"version":3,"sources":["../../src/server/models/curriculumCategory.js"],"names":["curriculumCategorySchema","Schema","name","type","String","organization","ObjectId","ref","createdAt","Date","default","now","statics","get","id","findById","exec","then","curriculumCategory","err","NOT_FOUND","reject","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,2BAA2B,IAAI,mBAASC,MAAb,CAAoB;AACjDC,UAAK;AACDC,cAAMC;AADL,KAD4C;AAIjDC,kBAAc;AACVF,cAAM,mBAASF,MAAT,CAAgBK,QADZ;AAEVC,aAAK;AAFK,KAJmC;AAQjDC,eAAW;AACPL,cAAMM,IADC;AAEPC,iBAASD,KAAKE;AAFP;AARsC,CAApB,CAAjC;;AAcA;;;AAGAX,yBAAyBY,OAAzB,GAAmC;AAC/B;;;;;AAKAC,OAN+B,eAM3BC,EAN2B,EAMvB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,kBAAD,EAAwB;AAC1B,gBAAIA,kBAAJ,EAAwB;AACpB,uBAAOA,kBAAP;AACH,aAFD,MAGI;AACA,oBAAMC,MAAM,uBAAa,oCAAb,EAAmD,qBAAWC,SAA9D,CAAZ;AACA,uBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ,SAVM,CAAP;AAWH,KAlB8B;;;AAoB/B;;;;;;AAMAG,QA1B+B,kBA0BK;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAElB,WAAW,CAAC,CAAd,EADC,EAENe,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINR,IAJM,EAAP;AAKH;AAhC8B,CAAnC;;kBAoCe,mBAASW,KAAT,CAAe,oBAAf,EAAqC3B,wBAArC,C","file":"curriculumCategory.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst curriculumCategorySchema = new mongoose.Schema({\r\n    name:{\r\n        type: String,\r\n    },\r\n    organization: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Organization'\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\ncurriculumCategorySchema.statics = {\r\n    /**\r\n    * Get curriculumCategory\r\n    * @param {ObjectId} id - The objectId of curriculumCategory.\r\n    * @returns {Promise<curriculumCategory, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((curriculumCategory) => {\r\n            if (curriculumCategory) {\r\n                return curriculumCategory;\r\n            }\r\n            else{\r\n                const err = new APIError('No such curriculumCategory exists!', httpStatus.NOT_FOUND);\r\n                return Promise.reject(err);    \r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List curriculumCategorys in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of curriculumCategorys to be skipped.\r\n    * @param {number} limit - Limit number of curriculumCategorys to be returned.\r\n    * @returns {Promise<curriculumCategory[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('CurriculumCategory', curriculumCategorySchema);\r\n"]}