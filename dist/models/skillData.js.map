{"version":3,"sources":["../../src/server/models/skillData.js"],"names":["skillResultSchema","Schema","skill","type","ObjectId","ref","clientCurriculum","trialNumber","Number","default","timerValue","numberData","stringData","String","notes","createdAt","Date","now","statics","get","id","findById","exec","then","skillResult","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,IAAI,mBAASC,MAAb,CAAoB;AAC1CC,WAAO;AACHC,cAAM,mBAASF,MAAT,CAAgBG,QADnB;AAEHC,aAAK;AAFF,KADmC;AAK1CC,sBAAkB;AACdH,cAAM,mBAASF,MAAT,CAAgBG,QADR;AAEdC,aAAK;AAFS,KALwB;AAS1CE,iBAAa;AACTJ,cAAMK,MADG;AAETC,iBAAS;AAFA,KAT6B;AAa1C;AACAC,gBAAY;AACRP,cAAMK;AADE,KAd8B;AAiB1CG,gBAAY;AACRR,cAAMK;AADE,KAjB8B;AAoB1CI,gBAAY;AACRT,cAAMU;AADE,KApB8B;AAuB1CC,WAAO;AACHX,cAAMU;AADH,KAvBmC;AA0B1CE,eAAW;AACPZ,cAAMa,IADC;AAEPP,iBAASO,KAAKC;AAFP;AA1B+B,CAApB,CAA1B;;AAgCA;;;AAGAjB,kBAAkBkB,OAAlB,GAA4B;AACxB;;;;;AAKAC,OANwB,eAMpBC,EANoB,EAMhB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,WAAD,EAAiB;AACnB,gBAAIA,WAAJ,EAAiB;AACb,uBAAOA,WAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SATM,CAAP;AAUH;AAjBuB,CAA5B;;kBAsCe,mBAASC,KAAT,CAAe,aAAf,EAA8BzB,iBAA9B,C","file":"skillData.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst skillResultSchema = new mongoose.Schema({\r\n    skill: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Skill'\r\n    },\r\n    clientCurriculum: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'ClientCurriculum'\r\n    },\r\n    trialNumber: {\r\n        type: Number,\r\n        default: 1\r\n    },\r\n    //like all timers, this represents the number of seconds\r\n    timerValue: {\r\n        type: Number\r\n    },\r\n    numberData: {\r\n        type: Number\r\n    },\r\n    stringData: {\r\n        type: String\r\n    },\r\n    notes: {\r\n        type: String\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\nskillResultSchema.statics = {\r\n    /**\r\n    * Get skillResult\r\n    * @param {ObjectId} id - The objectId of skillResult.\r\n    * @returns {Promise<skillResult, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((skillResult) => {\r\n            if (skillResult) {\r\n                return skillResult;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such skillResult exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List skillResults in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of skillResults to be skipped.\r\n    * @param {number} limit - Limit number of skillResults to be returned.\r\n    * @returns {Promise<skillResult[]>}\r\n    */\r\n//    list({ skip = 0, limit = 50 } = {}) {\r\n    // list({ skip = 0, limit = 50, query } = {}) {\r\n    //     return this.find(query)\r\n    //     .populate('skill')\r\n    //     .populate( {path:'clientCurriculum', populate: {path: 'curriculum client'}})\r\n    //     .sort({ trialNumber: -1 })\r\n    //     .skip(skip)\r\n    //     .limit(limit)\r\n    //     .exec();\r\n    // }\r\n};\r\n\r\n\r\nexport default mongoose.model('SkillResult', skillResultSchema);\r\n"]}