{"version":3,"sources":["../../src/server/models/curriculum.js"],"names":["curriculumSchema","Schema","name","type","String","skills","ObjectId","ref","curriculumCategory","organization","createdAt","Date","default","now","statics","get","id","findById","populate","path","exec","then","curriculum","err","NOT_FOUND","reject","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,mBAAmB,IAAI,mBAASC,MAAb,CAAoB;AACzCC,UAAK;AACDC,cAAMC;AADL,KADoC;AAIzCC,YAAO,CAAC,EAACF,MAAK,mBAASF,MAAT,CAAgBK,QAAtB,EAAgCC,KAAI,OAApC,EAAD,CAJkC;AAKzCC,wBAAoB;AAChBL,cAAM,mBAASF,MAAT,CAAgBK,QADN;AAEhBC,aAAK;AAFW,KALqB;AASzCE,kBAAc;AACVN,cAAM,mBAASF,MAAT,CAAgBK,QADZ;AAEVC,aAAK;AAFK,KAT2B;AAazCG,eAAW;AACPP,cAAMQ,IADC;AAEPC,iBAASD,KAAKE;AAFP;AAb8B,CAApB,CAAzB;;AAmBA;;;AAGAb,iBAAiBc,OAAjB,GAA2B;AACvB;;;;;AAKAC,OANuB,eAMnBC,EANmB,EAMf;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd;AACP;AACA;AAFO,SAGNE,QAHM,CAGG,EAACC,MAAK,QAAN,EAAgBD,UAAS,EAAEC,MAAM,oBAAR,EAAzB,EAHH,EAIND,QAJM,CAIG,oBAJH,EAKNE,IALM,GAMNC,IANM,CAMD,UAACC,UAAD,EAAgB;AAClB,gBAAIA,UAAJ,EAAgB;AACZ,uBAAOA,UAAP;AACH,aAFD,MAGI;AACA,oBAAMC,MAAM,uBAAa,4BAAb,EAA2C,qBAAWC,SAAtD,CAAZ;AACA,uBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ,SAdM,CAAP;AAeH,KAtBsB;;;AAwBvB;;;;;;AAMAG,QA9BuB,kBA8Ba;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEpB,WAAW,CAAC,CAAd,EADC,EAENiB,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINR,IAJM,EAAP;AAKH;AApCsB,CAA3B;;kBAwCe,mBAASW,KAAT,CAAe,YAAf,EAA6B/B,gBAA7B,C","file":"curriculum.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst curriculumSchema = new mongoose.Schema({\r\n    name:{\r\n        type: String,\r\n    },\r\n    skills:[{type:mongoose.Schema.ObjectId, ref:'Skill'}],\r\n    curriculumCategory: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'CurriculumCategory'\r\n    },\r\n    organization: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'Organization'\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\ncurriculumSchema.statics = {\r\n    /**\r\n    * Get curriculum\r\n    * @param {ObjectId} id - The objectId of curriculum.\r\n    * @returns {Promise<curriculum, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        //Deep populate FTW - TODO look at performance of this\r\n        //https://stackoverflow.com/questions/18867628/mongoose-deep-population-populate-a-populated-field\r\n        .populate({path:'skills', populate:{ path: 'targetType dttType'}})\r\n        .populate('curriculumCategory')\r\n        .exec()\r\n        .then((curriculum) => {\r\n            if (curriculum) {\r\n                return curriculum;\r\n            }\r\n            else{\r\n                const err = new APIError('No such curriculum exists!', httpStatus.NOT_FOUND);\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List curriculums in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of curriculums to be skipped.\r\n    * @param {number} limit - Limit number of curriculums to be returned.\r\n    * @returns {Promise<curriculum[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('Curriculum', curriculumSchema);\r\n"]}