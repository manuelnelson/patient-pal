{"version":3,"sources":["../../src/server/models/client.js"],"names":["ClientSchema","Schema","email","type","String","required","validate","isEmail","unique","firstname","lastname","birth","Date","sex","insurance","status","Boolean","createdAt","default","now","statics","get","id","findById","exec","then","Client","getByEmail","findOne","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,IAAI,mBAASC,MAAb,CAAoB;AACtCC,WAAM;AACFC,cAAMC,MADJ;AAEFC,kBAAU,IAFR;AAGFC,kBAAU,CAAE,oBAAUC,OAAZ,EAAqB,eAArB,CAHR;AAIFC,gBAAQ;AAJN,KADgC;AAOtCC,eAAW;AACPN,cAAMC;AADC,KAP2B;AAUtCM,cAAU;AACNP,cAAMC;AADA,KAV4B;AAatCO,WAAO;AACHR,cAAMS;AADH,KAb+B;AAgBtCC,SAAK;AACDV,cAAMC;AADL,KAhBiC;AAmBtCU,eAAW;AACPX,cAAMC;AADC,KAnB2B;AAsBtC;AACAW,YAAQ;AACJZ,cAAMa;AADF,KAvB8B;AA0BtCC,eAAW;AACPd,cAAMS,IADC;AAEPM,iBAASN,KAAKO;AAFP;AA1B2B,CAApB,CAAtB;;AAgCA;;;AAGAnB,cAAcoB,OAAd,GAAwB;AACpB;;;;;AAKAC,OANoB,eAMhBC,EANgB,EAMZ;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,OAAD,EAAa;AACf,gBAAIA,OAAJ,EAAa;AACT,uBAAOA,OAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SATM,CAAP;AAUH,KAjBmB;;AAkBpB;;;;;AAKAC,cAvBoB,sBAuBTzB,KAvBS,EAuBF;AACd,eAAO,KAAK0B,OAAL,CAAa,EAAC1B,OAAMA,KAAP,EAAb,EAA4BsB,IAA5B,GAAmCC,IAAnC,CAAwC,UAACC,OAAD,EAAa;AACxD,gBAAIA,OAAJ,EAAa;AACT,uBAAOA,OAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SAPM,CAAP;AAQH,KAhCmB;;;AAkCpB;;;;;;AAMAG,QAxCoB,kBAwCgB;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEhB,WAAW,CAAC,CAAd,EADC,EAENa,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINP,IAJM,EAAP;AAKH;AA9CmB,CAAxB;;kBAkDe,mBAASU,KAAT,CAAe,SAAf,EAA0BlC,aAA1B,C","file":"client.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst ClientSchema = new mongoose.Schema({\r\n    email:{\r\n        type: String,\r\n        required: true,\r\n        validate: [ validator.isEmail, 'invalid email' ],\r\n        unique: true\r\n    },\r\n    firstname: {\r\n        type: String,\r\n    },\r\n    lastname: {\r\n        type: String,\r\n    },\r\n    birth: {\r\n        type: Date\r\n    },\r\n    sex: {\r\n        type: String\r\n    },\r\n    insurance: {\r\n        type: String\r\n    },\r\n    //1 = active, 0 = disabled or disactive\r\n    status: {\r\n        type: Boolean\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\nClientSchema.statics = {\r\n    /**\r\n    * Get Client\r\n    * @param {ObjectId} id - The objectId of Client.\r\n    * @returns {Promise<Client, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((Client) => {\r\n            if (Client) {\r\n                return Client;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such Client exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n    /**\r\n    * Get Client by Email\r\n    * @param {string} email - The email of Client.\r\n    * @returns {Promise<Client, APIError>}\r\n    */\r\n    getByEmail(email) {\r\n        return this.findOne({email:email}).exec().then((Client) => {\r\n            if (Client) {\r\n                return Client;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such Client exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List Clients in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of Clients to be skipped.\r\n    * @param {number} limit - Limit number of Clients to be returned.\r\n    * @returns {Promise<Client[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('Client', ClientSchema);\r\n"]}