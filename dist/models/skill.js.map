{"version":3,"sources":["../../src/server/models/skill.js"],"names":["SkillSchema","Schema","targetName","type","String","required","text","goalName","stimulus","numberOfTrials","Number","default","targetType","ObjectId","ref","dttType","interval","taskSteps","maxThreshold","masteryType","targetInstructions","createdAt","Date","now","index","statics","get","id","findById","exec","then","Skill","list","skip","limit","find","sort","populate","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,IAAI,mBAASC,MAAb,CAAoB;AACpCC,gBAAY;AACRC,cAAMC,MADE;AAERC,kBAAU,IAFF;AAGRC,cAAM;AAHE,KADwB;AAMpCC,cAAU;AACNJ,cAAMC;AADA,KAN0B;AASpCI,cAAS;AACLL,cAAMC;AADD,KAT2B;AAYpCK,oBAAe;AACXN,cAAMO,MADK;AAEXL,kBAAU,IAFC;AAGXM,iBAAS;AAHE,KAZqB;AAiBpCC,gBAAY;AACRT,cAAM,mBAASF,MAAT,CAAgBY,QADd;AAERC,aAAK;AAFG,KAjBwB;AAqBpC;AACAC,aAAS;AACLZ,cAAM,mBAASF,MAAT,CAAgBY,QADjB;AAELC,aAAK;AAFA,KAtB2B;AA0BpC;AACA;AACAE,cAAU;AACNb,cAAMO,MADA;AAENC,iBAAQ;AAFF,KA5B0B;AAgCpCM,eAAW;AACPd,cAAMC;AADC,KAhCyB;AAmCpC;AACAc,kBAAc;AACVf,cAAMO,MADI;AAEVC,iBAAQ;AAFE,KApCsB;AAwCpC;AACAQ,iBAAa;AACThB,cAAMO;AADG,KAzCuB;AA4CpCU,wBAAmB;AACfjB,cAAMC;AADS,KA5CiB;AA+CpCiB,eAAW;AACPlB,cAAMmB,IADC;AAEPX,iBAASW,KAAKC;AAFP;AA/CyB,CAApB,CAApB;AAoDAvB,YAAYwB,KAAZ,CAAkB,EAAC,cAAc,MAAf,EAAlB;AACA;;;AAGAxB,YAAYyB,OAAZ,GAAsB;AAClB;;;;;AAKAC,OANkB,eAMdC,EANc,EAMV;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,KAAD,EAAW;AACb,gBAAIA,KAAJ,EAAW;AACP,uBAAOA,KAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SATM,CAAP;AAUH,KAjBiB;;;AAmBlB;;;;;;AAMAC,QAzBkB,kBAyBkB;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEf,WAAW,CAAC,CAAd,EADC,EAENgB,QAFM,CAEG,oBAFH,EAGNJ,IAHM,CAGDA,IAHC,EAINC,KAJM,CAIAA,KAJA,EAKNL,IALM,EAAP;AAMH;AAhCiB,CAAtB;;kBAoCe,mBAASS,KAAT,CAAe,OAAf,EAAwBtC,WAAxB,C","file":"skill.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst SkillSchema = new mongoose.Schema({\r\n    targetName: {\r\n        type: String,\r\n        required: true,\r\n        text: true\r\n    },\r\n    goalName: {\r\n        type: String\r\n    },\r\n    stimulus:{\r\n        type: String\r\n    },\r\n    numberOfTrials:{\r\n        type: Number,\r\n        required: true,\r\n        default: 1\r\n    },\r\n    targetType: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'TargetType'\r\n    },\r\n    //specific to ddt target type and jump-to\r\n    dttType: {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'DttType'\r\n    },\r\n    //specific to target types duration (seconds), fluency/rate (amount), whole/partial interval\r\n    //will always store amount in seconds\r\n    interval: {\r\n        type: Number,\r\n        default:0\r\n    },\r\n    taskSteps: {\r\n        type: String        \r\n    },\r\n    //specific to quantity target type\r\n    maxThreshold: {\r\n        type: Number,\r\n        default:0\r\n    },\r\n    //two mastery types, 1 = Automatic, 2 = Manual\r\n    masteryType: {\r\n        type: Number\r\n    },\r\n    targetInstructions:{\r\n        type: String\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\nSkillSchema.index({'targetName': 'text'});\r\n/**\r\n* Statics\r\n*/\r\nSkillSchema.statics = {\r\n    /**\r\n    * Get Skill\r\n    * @param {ObjectId} id - The objectId of Skill.\r\n    * @returns {Promise<Skill, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((Skill) => {\r\n            if (Skill) {\r\n                return Skill;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such Skill exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List Skills in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of Skills to be skipped.\r\n    * @param {number} limit - Limit number of Skills to be returned.\r\n    * @returns {Promise<Skill[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .populate('targetType dttType')\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('Skill', SkillSchema);\r\n"]}