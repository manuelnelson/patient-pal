{"version":3,"sources":["../../src/server/models/targetType.js"],"names":["TargetTypeSchema","Schema","name","type","String","createdAt","Date","default","now","statics","get","id","findById","exec","then","TargetType","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,mBAAmB,IAAI,mBAASC,MAAb,CAAoB;AACzCC,UAAK;AACDC,cAAMC;AADL,KADoC;AAIzCC,eAAW;AACPF,cAAMG,IADC;AAEPC,iBAASD,KAAKE;AAFP;AAJ8B,CAApB,CAAzB;;AAUA;;;AAGAR,iBAAiBS,OAAjB,GAA2B;AACvB;;;;;AAKAC,OANuB,eAMnBC,EANmB,EAMf;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,UAAD,EAAgB;AAClB,gBAAIA,UAAJ,EAAgB;AACZ,uBAAOA,UAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SATM,CAAP;AAUH,KAjBsB;;;AAmBvB;;;;;;AAMAC,QAzBuB,kBAyBa;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEf,WAAW,CAAC,CAAd,EADC,EAENY,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINL,IAJM,EAAP;AAKH;AA/BsB,CAA3B;;kBAmCe,mBAASQ,KAAT,CAAe,YAAf,EAA6BrB,gBAA7B,C","file":"targetType.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst TargetTypeSchema = new mongoose.Schema({\r\n    name:{\r\n        type: String,\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\nTargetTypeSchema.statics = {\r\n    /**\r\n    * Get TargetType\r\n    * @param {ObjectId} id - The objectId of TargetType.\r\n    * @returns {Promise<TargetType, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((TargetType) => {\r\n            if (TargetType) {\r\n                return TargetType;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such TargetType exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List TargetTypes in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of TargetTypes to be skipped.\r\n    * @param {number} limit - Limit number of TargetTypes to be returned.\r\n    * @returns {Promise<TargetType[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('TargetType', TargetTypeSchema);\r\n"]}