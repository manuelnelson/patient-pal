{"version":3,"sources":["../../src/server/models/user.js"],"names":["UserSchema","Schema","username","type","String","required","email","validate","isEmail","createdAt","Date","default","now","statics","get","id","findById","exec","then","user","err","NOT_FOUND","reject","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACnCC,cAAU;AACNC,cAAMC,MADA;AAENC,kBAAU;AAFJ,KADyB;AAKnCC,WAAO;AACHH,cAAMC,MADH;AAEHC,kBAAU,IAFP;AAGHE,kBAAU,CAAE,oBAAUC,OAAZ,EAAqB,eAArB;AAHP,KAL4B;AAUnCC,eAAW;AACPN,cAAMO,IADC;AAEPC,iBAASD,KAAKE;AAFP;AAVwB,CAApB,CAAnB;;AAiBA;;;AAGAZ,WAAWa,OAAX,GAAqB;AACjB;;;;;AAKAC,OANiB,eAMbC,EANa,EAMT;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,IAAD,EAAU;AACZ,gBAAIA,IAAJ,EAAU;AACN,uBAAOA,IAAP;AACH;AACD,gBAAMC,MAAM,uBAAa,sBAAb,EAAqC,qBAAWC,SAAhD,CAAZ;AACA,mBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH,SARM,CAAP;AASH,KAhBgB;;;AAkBjB;;;;;;AAMAG,QAxBiB,kBAwBmB;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAElB,WAAW,CAAC,CAAd,EADC,EAENe,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINR,IAJM,EAAP;AAKH;AA9BgB,CAArB;;kBAkCe,mBAASW,KAAT,CAAe,MAAf,EAAuB5B,UAAvB,C","file":"user.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    username: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        validate: [ validator.isEmail, 'invalid email' ]\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n\r\n/**\r\n* Statics\r\n*/\r\nUserSchema.statics = {\r\n    /**\r\n    * Get user\r\n    * @param {ObjectId} id - The objectId of user.\r\n    * @returns {Promise<User, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((user) => {\r\n            if (user) {\r\n                return user;\r\n            }\r\n            const err = new APIError('No such user exists!', httpStatus.NOT_FOUND);\r\n            return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List users in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of users to be skipped.\r\n    * @param {number} limit - Limit number of users to be returned.\r\n    * @returns {Promise<User[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}