{"version":3,"sources":["../../src/server/models/organization.js"],"names":["organizationSchema","Schema","name","type","String","createdAt","Date","default","now","statics","get","id","findById","exec","then","organization","list","skip","limit","find","sort","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,qBAAqB,IAAI,mBAASC,MAAb,CAAoB;AAC3CC,UAAK;AACDC,cAAMC;AADL,KADsC;AAI3CC,eAAW;AACPF,cAAMG,IADC;AAEPC,iBAASD,KAAKE;AAFP;AAJgC,CAApB,CAA3B;;AAUA;;;AAGAR,mBAAmBS,OAAnB,GAA6B;AACzB;;;;;AAKAC,OANyB,eAMrBC,EANqB,EAMjB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,YAAD,EAAkB;AACpB,gBAAIA,YAAJ,EAAkB;AACd,uBAAOA,YAAP;AACH;AACD,mBAAO,IAAP;AACA;AACA;AACH,SATM,CAAP;AAUH,KAjBwB;;;AAmBzB;;;;;;AAMAC,QAzByB,kBAyBW;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAEf,WAAW,CAAC,CAAd,EADC,EAENY,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINL,IAJM,EAAP;AAKH;AA/BwB,CAA7B;;kBAmCe,mBAASQ,KAAT,CAAe,cAAf,EAA+BrB,kBAA/B,C","file":"organization.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\nconst organizationSchema = new mongoose.Schema({\r\n    name:{\r\n        type: String,\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\norganizationSchema.statics = {\r\n    /**\r\n    * Get organization\r\n    * @param {ObjectId} id - The objectId of organization.\r\n    * @returns {Promise<organization, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((organization) => {\r\n            if (organization) {\r\n                return organization;\r\n            }\r\n            return null;\r\n            // const err = new APIError('No such organization exists!', httpStatus.NOT_FOUND);\r\n            // return Promise.reject(err);\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List organizations in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of organizations to be skipped.\r\n    * @param {number} limit - Limit number of organizations to be returned.\r\n    * @returns {Promise<organization[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n\r\nexport default mongoose.model('Organization', organizationSchema);\r\n"]}