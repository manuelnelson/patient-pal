{"version":3,"sources":["../../src/server/models/organization.js"],"names":["organizationSchema","Schema","name","type","String","email","stripeCustomerId","stripeSourceId","stripeSubscriptionId","createdAt","Date","default","now","statics","get","id","findById","exec","then","organization","err","NOT_FOUND","reject","list","skip","limit","find","sort","pre","next","createCustomer","locals","sessionUserEmail","customer","req","body","createSubscription","subscription","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,qBAAqB,IAAI,mBAASC,MAAb,CAAoB;AAC3CC,UAAK;AACDC,cAAMC;AADL,KADsC;AAI3CC,WAAO;AACHF,cAAMC;AADH,KAJoC;AAO3CE,sBAAiB;AACbH,cAAMC;AADO,KAP0B;AAU3CG,oBAAgB;AACZJ,cAAMC;AADM,KAV2B;AAa3CI,0BAAsB;AAClBL,cAAMC;AADY,KAbqB;AAgB3CK,eAAW;AACPN,cAAMO,IADC;AAEPC,iBAASD,KAAKE;AAFP;AAhBgC,CAApB,CAA3B;;AAsBA;;;AAGAZ,mBAAmBa,OAAnB,GAA6B;AACzB;;;;;AAKAC,OANyB,eAMrBC,EANqB,EAMjB;AACJ,eAAO,KAAKC,QAAL,CAAcD,EAAd,EACNE,IADM,GAENC,IAFM,CAED,UAACC,YAAD,EAAkB;AACpB,gBAAIA,YAAJ,EAAkB;AACd,uBAAOA,YAAP;AACH,aAFD,MAGI;AACA,oBAAMC,MAAM,uBAAa,8BAAb,EAA6C,qBAAWC,SAAxD,CAAZ;AACA,uBAAO,mBAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ,SAVM,CAAP;AAWH,KAlBwB;;;AAoBzB;;;;;;AAMAG,QA1ByB,kBA0BW;AAAA,uFAAJ,EAAI;AAAA,6BAA7BC,IAA6B;AAAA,YAA7BA,IAA6B,6BAAtB,CAAsB;AAAA,8BAAnBC,KAAmB;AAAA,YAAnBA,KAAmB,8BAAX,EAAW;;AAChC,eAAO,KAAKC,IAAL,GACNC,IADM,CACD,EAAElB,WAAW,CAAC,CAAd,EADC,EAENe,IAFM,CAEDA,IAFC,EAGNC,KAHM,CAGAA,KAHA,EAINR,IAJM,EAAP;AAKH;AAhCwB,CAA7B;;AAmCA;AACAjB,mBAAmB4B,GAAnB,CAAuB,MAAvB,EAA+B,UAASC,IAAT,EAAc;AAAA;;AACzC;AACA,QAAIV,eAAe,IAAnB;AACA;AACA,QAAI,CAACA,aAAab,gBAAlB,EAAmC;AAC/B,iCAAYwB,cAAZ,CAA2B,EAACC,QAAQ,EAACC,kBAAkBb,aAAad,KAAhC,EAAT,EAA3B,EAA4E,EAA5E,EAA+EwB,IAA/E,EAAqFX,IAArF,CAA0F,oBAAY;AAClG,kBAAKZ,gBAAL,GAAwB2B,SAASlB,EAAjC;AACA,gBAAImB,MAAM,EAACC,MAAM;AACbF,8BAASA,SAASlB;AADL,iBAAP,EAAV;AAGA;AACA,qCAAYqB,kBAAZ,CAA+BF,GAA/B,EAAmC,EAAnC,EAAsCL,IAAtC,EAA4CX,IAA5C,CAAiD,wBAAe;AAC5D,sBAAKV,oBAAL,GAA4B6B,aAAatB,EAAzC;AACAc;AACH,aAHD;AAIH,SAVD;AAWH,KAZD,MAaI;AACAA;AACH;AAEJ,CArBD;;kBAwBe,mBAASS,KAAT,CAAe,cAAf,EAA+BtC,kBAA/B,C","file":"organization.js","sourcesContent":["import Promise from 'bluebird';\r\nimport mongoose from 'mongoose';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport validator from 'validator';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport {BillingCtrl} from '../controllers';\r\n\r\nconst organizationSchema = new mongoose.Schema({\r\n    name:{\r\n        type: String,\r\n    },\r\n    email: {\r\n        type: String\r\n    },\r\n    stripeCustomerId:{\r\n        type: String\r\n    },    \r\n    stripeSourceId: {\r\n        type: String        \r\n    },\r\n    stripeSubscriptionId: {\r\n        type: String        \r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n\r\n/**\r\n* Statics\r\n*/\r\norganizationSchema.statics = {\r\n    /**\r\n    * Get organization\r\n    * @param {ObjectId} id - The objectId of organization.\r\n    * @returns {Promise<organization, APIError>}\r\n    */\r\n    get(id) {\r\n        return this.findById(id)\r\n        .exec()\r\n        .then((organization) => {\r\n            if (organization) {\r\n                return organization;\r\n            }\r\n            else{\r\n                const err = new APIError('No such organization exists!', httpStatus.NOT_FOUND);\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n    * List organizations in descending order of 'createdAt' timestamp.\r\n    * @param {number} skip - Number of organizations to be skipped.\r\n    * @param {number} limit - Limit number of organizations to be returned.\r\n    * @returns {Promise<organization[]>}\r\n    */\r\n    list({ skip = 0, limit = 50 } = {}) {\r\n        return this.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .exec();\r\n    }\r\n};\r\n\r\n/* before we create an organization, we need to make sure we have an account and subscription for it through stripe. */\r\norganizationSchema.pre('save', function(next){\r\n    // we do not want to lose the correct context of the keyword `this`, so let's cache it in a variable called organization\r\n    let organization = this;\r\n    /* if stripe customer doesn't exists, let's create it*/    \r\n    if (!organization.stripeCustomerId){\r\n        BillingCtrl.createCustomer({locals: {sessionUserEmail: organization.email}},{},next).then(customer => {\r\n            this.stripeCustomerId = customer.id;\r\n            let req = {body: {\r\n                customer:customer.id,\r\n            }};\r\n            //create subscription\r\n            BillingCtrl.createSubscription(req,{},next).then(subscription =>{\r\n                this.stripeSubscriptionId = subscription.id;\r\n                next();\r\n            })\r\n        })\r\n    }\r\n    else{\r\n        next();\r\n    }\r\n\r\n});\r\n\r\n\r\nexport default mongoose.model('Organization', organizationSchema);\r\n"]}