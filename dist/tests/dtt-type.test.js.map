{"version":3,"sources":["../../src/server/tests/dtt-type.test.js"],"names":["config","includeStack","after","done","models","modelSchemas","connection","close","describe","dttType","name","it","post","send","expect","OK","then","res","body","to","equal","catch","get","_id","NOT_FOUND","message","put","be","an","delete"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAKA,MAAL,CAAYC,YAAZ,GAA2B,IAA3B;AACA;;;;AAKAC,MAAM,UAACC,IAAD,EAAU;AACZ;AACA,qBAASC,MAAT,GAAkB,EAAlB;AACA,qBAASC,YAAT,GAAwB,EAAxB;AACA,qBAASC,UAAT,CAAoBC,KAApB;AACAJ;AACH,CAND;;AAQEK,SAAS,iBAAT,EAA4B,YAAM;AAChC,MAAIC,UAAU;AACZC,UAAM;AADM,GAAd;;AAIAF,WAAS,sBAAT,EAAiC,YAAM;AACrCG,OAAG,6BAAH,EAAkC,UAACR,IAAD,EAAU;AAC1C,gDACGS,IADH,CACQ,eADR,EAEGC,IAFH,CAEQJ,OAFR,EAGGK,MAHH,CAGU,qBAAWC,EAHrB,EAIGC,IAJH,CAIQ,UAACC,GAAD,EAAS;AACb,0BAAOA,IAAIC,IAAJ,CAASR,IAAhB,EAAsBS,EAAtB,CAAyBC,KAAzB,CAA+BX,QAAQC,IAAvC;AACAD,kBAAUQ,IAAIC,IAAd;AACAf;AACD,OARH,EASGkB,KATH,CASSlB,IATT;AAUD,KAXD;AAYD,GAbD;;AAeAK,WAAS,qBAAT,EAAgC,YAAM;AAClCG,OAAG,6BAAH,EAAkC,UAACR,IAAD,EAAU;AAC1C,gDACGmB,GADH,CACO,mBAAmBb,QAAQc,GADlC,EAEGT,MAFH,CAEU,qBAAWC,EAFrB,EAGGC,IAHH,CAGQ,UAACC,GAAD,EAAS;AACb,0BAAOA,IAAIC,IAAJ,CAASR,IAAhB,EAAsBS,EAAtB,CAAyBC,KAAzB,CAA+BX,QAAQC,IAAvC;AACAP;AACD,OANH,EAOGkB,KAPH,CAOSlB,IAPT;AAQD,KATD;AAUAQ,OAAG,yBAAH,EAA8B,UAACR,IAAD,EAAU;AACpC,gDACGmB,GADH,CACO,wCADP,EAEGR,MAFH,CAEU,qBAAWU,SAFrB,EAGGR,IAHH,CAGQ,UAACC,GAAD,EAAS;AACb,0BAAOA,IAAIC,IAAJ,CAASO,OAAhB,EAAyBN,EAAzB,CAA4BC,KAA5B,CAAkC,WAAlC;AACAjB;AACD,OANH,EAOGkB,KAPH,CAOSlB,IAPT;AAQH,KATD;AAUH,GArBD;;AAwBAK,WAAS,6BAAT,EAAwC,YAAM;AAC1CG,OAAG,4BAAH,EAAiC,UAACR,IAAD,EAAU;AACzCM,cAAQC,IAAR,GAAe,MAAf;AACA,gDACGgB,GADH,oBACwBjB,QAAQc,GADhC,EAEGV,IAFH,CAEQJ,OAFR,EAGGK,MAHH,CAGU,qBAAWC,EAHrB,EAIGC,IAJH,CAIQ,UAACC,GAAD,EAAS;AACb,0BAAOA,IAAIC,IAAJ,CAASR,IAAhB,EAAsBS,EAAtB,CAAyBC,KAAzB,CAA+B,MAA/B;AACAjB;AACD,OAPH,EAQGkB,KARH,CAQSlB,IART;AASD,KAXD;AAYD,GAbH;;AAeEK,WAAS,sBAAT,EAAiC,YAAM;AACrCG,OAAG,yCAAH,EAA8C,UAACR,IAAD,EAAU;AACtD,gDACGmB,GADH,yBAC6Bb,QAAQC,IADrC,EAEGI,MAFH,CAEU,qBAAWC,EAFrB,EAGGC,IAHH,CAGQ,UAACC,GAAD,EAAS;AACX,0BAAOA,IAAIC,IAAX,EAAiBC,EAAjB,CAAoBQ,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACAzB;AACH,OANH,EAOGkB,KAPH,CAOSlB,IAPT;AAQD,KATD;AAUD,GAXD;;AAaAK,WAAS,wBAAT,EAAmC,YAAM;AACvCG,OAAG,2BAAH,EAAgC,UAACR,IAAD,EAAU;AACxC,gDACG0B,MADH,oBAC2BpB,QAAQc,GADnC,EAEGT,MAFH,CAEU,qBAAWC,EAFrB,EAGGC,IAHH,CAGQ,UAACC,GAAD,EAAS;AACb,0BAAOA,IAAIC,IAAJ,CAASR,IAAhB,EAAsBS,EAAtB,CAAyBC,KAAzB,CAA+BX,QAAQC,IAAvC;AACAP;AACD,OANH,EAOGkB,KAPH,CAOSlB,IAPT;AAQD,KATD;AAUD,GAXD;AAaL,CArFC","file":"dtt-type.test.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport httpStatus from 'http-status';\r\nimport chai, { expect } from 'chai';\r\nimport app from '../index';\r\n\r\nchai.config.includeStack = true;\r\n/**\r\n * root level hooks\r\n */\r\n\r\n\r\nafter((done) => {\r\n    // required because https://github.com/Automattic/mongoose/issues/1251#issuecomment-65793092\r\n    mongoose.models = {};\r\n    mongoose.modelSchemas = {};\r\n    mongoose.connection.close();\r\n    done();\r\n});\r\n\r\n  describe('## DttType APIs', () => {\r\n    let dttType = {\r\n      name: 'test',\r\n    };\r\n  \r\n    describe('# POST /api/dttTypes', () => {\r\n      it('should create a new dttType', (done) => {\r\n        request(app)\r\n          .post('/api/dttTypes')\r\n          .send(dttType)\r\n          .expect(httpStatus.OK)\r\n          .then((res) => {\r\n            expect(res.body.name).to.equal(dttType.name);\r\n            dttType = res.body;\r\n            done();\r\n          })\r\n          .catch(done);\r\n      });\r\n    });\r\n\r\n    describe('# GET /api/dttTypes', () => {\r\n        it('should retrieve the dttType', (done) => {\r\n          request(app)\r\n            .get('/api/dttTypes/' + dttType._id)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.name).to.equal(dttType.name);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n        it('should return not found', (done) => {\r\n            request(app)\r\n              .get('/api/dttTypes/56c787ccc67fc16ccc1a5e92')\r\n              .expect(httpStatus.NOT_FOUND)\r\n              .then((res) => {\r\n                expect(res.body.message).to.equal('Not Found');\r\n                done();\r\n              })\r\n              .catch(done);\r\n        });\r\n    });\r\n  \r\n\r\n    describe('# PUT /api/dttTypes/:userId', () => {\r\n        it('should update user details', (done) => {\r\n          dttType.name = 'bama';\r\n          request(app)\r\n            .put(`/api/dttTypes/${dttType._id}`)\r\n            .send(dttType)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.name).to.equal('bama');\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# Get /api/dttTypes/', () => {\r\n        it('should search dttTypes and return array', (done) => {\r\n          request(app)\r\n            .get(`/api/dttTypes?name=${dttType.name}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n                expect(res.body).to.be.an('array');\r\n                done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# DELETE /api/dttTypes', () => {\r\n        it('should delete the dttType', (done) => {\r\n          request(app)\r\n            .delete(`/api/dttTypes/${dttType._id}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.name).to.equal(dttType.name);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n  \r\n});"]}