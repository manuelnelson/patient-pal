{"version":3,"sources":["../../src/server/tests/client.test.js"],"names":["config","includeStack","organization","after","done","models","modelSchemas","connection","close","describe","client","email","password","role","firstname","lastname","status","it","post","send","expect","OK","then","res","body","to","equal","catch","get","_id","NOT_FOUND","message","put","be","an","delete","userId"],"mappings":"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","file":"client.test.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport httpStatus from 'http-status';\r\nimport chai, { expect } from 'chai';\r\nimport app from '../index';\r\n\r\nchai.config.includeStack = true;\r\n/**\r\n * root level hooks\r\n */\r\n\r\nlet organization = '59ca7f03298d4e2f1c3db5ed'; \r\n\r\nafter((done) => {\r\n    // required because https://github.com/Automattic/mongoose/issues/1251#issuecomment-65793092\r\n    mongoose.models = {};\r\n    mongoose.modelSchemas = {};\r\n    mongoose.connection.close();\r\n    done();\r\n});\r\n\r\n  describe('## Client APIs', () => {\r\n    let client = {\r\n      email: 'client@test.com',\r\n      password: 'p@ssw0rd!',\r\n      role: 10,\r\n      firstname: 'test',\r\n      lastname: 'beryy',\r\n      organization: organization,\r\n      status:1\r\n    };\r\n  \r\n    describe('# POST /api/clients', () => {\r\n      it('should create a new client', (done) => {\r\n        request(app)\r\n          .post('/api/clients')\r\n          .send(client)\r\n          .expect(httpStatus.OK)\r\n          .then((res) => {\r\n            expect(res.body.firstname).to.equal(client.firstname);\r\n            client = res.body;\r\n            done();\r\n          })\r\n          .catch(done);\r\n      });\r\n    });\r\n\r\n    describe('# GET /api/clients', () => {\r\n        it('should retrieve the client', (done) => {\r\n          request(app)\r\n            .get('/api/clients/' + client._id)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.firstname).to.equal(client.firstname);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n        it('should return not found', (done) => {\r\n            request(app)\r\n              .get('/api/clients/56c787ccc67fc16ccc1a5e92')\r\n              .expect(httpStatus.NOT_FOUND)\r\n              .then((res) => {\r\n                expect(res.body.message).to.equal('Not Found');\r\n                done();\r\n              })\r\n              .catch(done);\r\n        });\r\n    });\r\n  \r\n\r\n    describe('# PUT /api/clients/:userId', () => {\r\n        it('should update user details', (done) => {\r\n          client.firstname = 'bama';\r\n          request(app)\r\n            .put(`/api/clients/${client._id}`)\r\n            .send(client)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.firstname).to.equal('bama');\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# Get /api/clients/', () => {\r\n        it('should search clients and return array', (done) => {\r\n          request(app)\r\n            .get(`/api/clients?firstname=${client.firstname}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n                expect(res.body).to.be.an('array');\r\n                done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# DELETE /api/users', () => {\r\n        it('should delete the client by deleting the user', (done) => {\r\n          request(app)\r\n            .delete(`/api/users/${client.userId}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.email).to.equal(client.email);\r\n              //expect(res.body.firstname).to.equal(professional.firstname);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n  \r\n});"]}