{"version":3,"sources":["../../src/server/tests/appointment.test.js"],"names":["config","includeStack","after","done","models","modelSchemas","connection","close","describe","appointment","startDate","endDate","location","it","post","send","expect","OK","then","res","body","name","to","equal","catch","get","_id","NOT_FOUND","message","put","be","an","delete"],"mappings":"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","file":"appointment.test.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport httpStatus from 'http-status';\r\nimport chai, { expect } from 'chai';\r\nimport app from '../index';\r\n\r\nchai.config.includeStack = true;\r\n/**\r\n * root level hooks\r\n */\r\n\r\n\r\nafter((done) => {\r\n    // required because https://github.com/Automattic/mongoose/issues/1251#issuecomment-65793092\r\n    mongoose.models = {};\r\n    mongoose.modelSchemas = {};\r\n    mongoose.connection.close();\r\n    done();\r\n});\r\n  describe('## Appointment APIs', () => {\r\n    let appointment = {\r\n      startDate: '11/09/2017', \r\n      endDate: '11/10/2017', \r\n      location: 'home'    \r\n    };\r\n\r\n    describe('# POST /api/appointments', () => {\r\n      it('should create a new appointment', (done) => {\r\n        request(app)\r\n          .post('/api/appointments')\r\n          .send(appointment)\r\n          .expect(httpStatus.OK)\r\n          .then((res) => {\r\n            expect(res.body.name).to.equal(appointment.name);\r\n            appointment = res.body;\r\n            done();\r\n          })\r\n          .catch(done);\r\n      });\r\n    });\r\n      \r\n\r\n    describe('# GET /api/appointments', () => {\r\n        it('should retrieve the appointment', (done) => {\r\n          request(app)\r\n            .get('/api/appointments/' + appointment._id)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.name).to.equal(appointment.name);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n        it('should return not found', (done) => {\r\n            request(app)\r\n              .get('/api/appointments/56c787ccc67fc16ccc1a5e92')\r\n              .expect(httpStatus.NOT_FOUND)\r\n              .then((res) => {\r\n                expect(res.body.message).to.equal('Not Found');\r\n                done();\r\n              })\r\n              .catch(done);\r\n        });\r\n    });\r\n  \r\n\r\n    describe('# PUT /api/appointments/:userId', () => {\r\n        it('should update user details', (done) => {\r\n          appointment.location = 'bama';\r\n          request(app)\r\n            .put(`/api/appointments/${appointment._id}`)\r\n            .send(appointment)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.location).to.equal('bama');\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# Get /api/appointments/', () => {\r\n        it('should search appointments and return array', (done) => {\r\n          request(app)\r\n            .get(`/api/appointments?location=${appointment.location}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n                expect(res.body).to.be.an('array');\r\n                done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# DELETE /api/appointments', () => {\r\n        it('should delete the appointment', (done) => {\r\n          request(app)\r\n            .delete(`/api/appointments/${appointment._id}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.location).to.equal(appointment.location);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n  \r\n});"]}