{"version":3,"sources":["../../src/server/tests/professional.test.js"],"names":["config","includeStack","organization","after","done","models","modelSchemas","connection","close","describe","professional","email","password","role","firstname","lastname","title","status","it","post","send","expect","OK","then","res","body","to","equal","userId","is","not","catch","get","_id","NOT_FOUND","message","put","be","an","delete"],"mappings":"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","file":"professional.test.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport request from 'supertest';\r\nimport httpStatus from 'http-status';\r\nimport chai, { expect } from 'chai';\r\nimport app from '../index';\r\n\r\nchai.config.includeStack = true;\r\n/**\r\n * root level hooks\r\n */\r\n\r\nlet organization = '59ca7f03298d4e2f1c3db5ed'; \r\n// get organization to add as ID to professional\r\n// before((done) => {\r\n//     request(app)\r\n//     .get('/api/organizations')\r\n//     .expect(httpStatus.OK)\r\n//     .then((res) => {\r\n//         console.log(res.body);\r\n//         organization = res.body._id;\r\n//         done();\r\n//     })\r\n\r\n// })\r\n\r\nafter((done) => {\r\n    // required because https://github.com/Automattic/mongoose/issues/1251#issuecomment-65793092\r\n    mongoose.models = {};\r\n    mongoose.modelSchemas = {};\r\n    mongoose.connection.close();\r\n    done();\r\n});\r\n\r\n  describe('## Professional APIs', () => {\r\n    let professional = {\r\n      email: 'test@test.com',\r\n      password: 'p@ssw0rd!',\r\n      role: 2,\r\n      firstname: 'test',\r\n      lastname: 'lastname',\r\n      title: 'professional',\r\n      organization: organization,\r\n      status:1\r\n    };\r\n  \r\n    describe('# POST /api/professionals', () => {\r\n      it('should create a new professional', (done) => {\r\n        request(app)\r\n          .post('/api/professionals')\r\n          .send(professional)\r\n          .expect(httpStatus.OK)\r\n          .then((res) => {\r\n            expect(res.body.email).to.equal(professional.email);\r\n            expect(res.body.firstname).to.equal(professional.firstname);\r\n            expect(res.body.userId).is.not.equal(null);\r\n            professional = res.body;\r\n            done();\r\n          })\r\n          .catch(done);\r\n      });\r\n    });\r\n\r\n    describe('# GET /api/professionals', () => {\r\n        it('should retrieve the professional', (done) => {\r\n          request(app)\r\n            .get('/api/professionals/' + professional._id)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.email).to.equal(professional.email);\r\n              expect(res.body.firstname).to.equal(professional.firstname);\r\n              expect(res.body.userId).is.not.equal(null);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n        it('should return not found', (done) => {\r\n            request(app)\r\n              .get('/api/professionals/56c787ccc67fc16ccc1a5e92')\r\n              .expect(httpStatus.NOT_FOUND)\r\n              .then((res) => {\r\n                expect(res.body.message).to.equal('Not Found');\r\n                done();\r\n              })\r\n              .catch(done);\r\n        });\r\n    });\r\n  \r\n\r\n    describe('# PUT /api/professionals/:userId', () => {\r\n        it('should update user details', (done) => {\r\n          professional.firstname = 'bama';\r\n          request(app)\r\n            .put(`/api/professionals/${professional._id}`)\r\n            .send(professional)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.firstname).to.equal('bama');\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# Get /api/professionals/', () => {\r\n        it('should search professionals and return array', (done) => {\r\n          request(app)\r\n            .get(`/api/professionals?firstname=${professional.firstname}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n                expect(res.body).to.be.an('array');\r\n                done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n\r\n      describe('# DELETE /api/users', () => {\r\n        it('should delete the professional by deleting the user', (done) => {\r\n            //console.log(professional.userId)\r\n          request(app)\r\n            .delete(`/api/users/${professional.userId}`)\r\n            .expect(httpStatus.OK)\r\n            .then((res) => {\r\n              expect(res.body.email).to.equal(professional.email);\r\n              //expect(res.body.firstname).to.equal(professional.firstname);\r\n              done();\r\n            })\r\n            .catch(done);\r\n        });\r\n      });\r\n  \r\n});"]}