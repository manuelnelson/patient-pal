{"version":3,"sources":["../../src/server/api/auth-routes.js"],"names":["user","username","password","login","req","res","next","body","token","sign","jwtSecret","json","err","UNAUTHORIZED","getRandomNumber","num","Math","random"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,OAAO;AACXC,YAAU,OADC;AAEXC,YAAU;AAFC,CAAb;;AAKA;;;;;;;AAOA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC7B;AACA;AACA,MAAIF,IAAIG,IAAJ,CAASN,QAAT,KAAsBD,KAAKC,QAA3B,IAAuCG,IAAIG,IAAJ,CAASL,QAAT,KAAsBF,KAAKE,QAAtE,EAAgF;AAC9E,QAAMM,QAAQ,uBAAIC,IAAJ,CAAS;AACrBR,gBAAUD,KAAKC;AADM,KAAT,EAEX,iBAAOS,SAFI,CAAd;AAGA,WAAOL,IAAIM,IAAJ,CAAS;AACdH,kBADc;AAEdP,gBAAUD,KAAKC;AAFD,KAAT,CAAP;AAID;;AAED,MAAMW,MAAM,uBAAa,sBAAb,EAAqC,qBAAWC,YAAhD,EAA8D,IAA9D,CAAZ;AACA,SAAOP,KAAKM,GAAL,CAAP;AACD;;AAED;;;;;;AAMA,SAASE,eAAT,CAAyBV,GAAzB,EAA8BC,GAA9B,EAAmC;AACjC;AACA,SAAOA,IAAIM,IAAJ,CAAS;AACdX,UAAMI,IAAIJ,IADI;AAEde,SAAKC,KAAKC,MAAL,KAAgB;AAFP,GAAT,CAAP;AAID;;kBAEc,EAAEd,YAAF,EAASW,gCAAT,E","file":"auth-routes.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport httpStatus from 'http-status';\r\nimport APIError from '../lib/APIError';\r\nimport config from '../config';\r\n\r\n// sample user, used for authentication\r\nconst user = {\r\n  username: 'react',\r\n  password: 'express'\r\n};\r\n\r\n/**\r\n * Returns jwt token if valid username and password is provided\r\n * @param req\r\n * @param res\r\n * @param next\r\n * @returns {*}\r\n */\r\nfunction login(req, res, next) {\r\n  // Ideally you'll fetch this from the db\r\n  // Idea here was to show how jwt works with simplicity\r\n  if (req.body.username === user.username && req.body.password === user.password) {\r\n    const token = jwt.sign({\r\n      username: user.username\r\n    }, config.jwtSecret);\r\n    return res.json({\r\n      token,\r\n      username: user.username\r\n    });\r\n  }\r\n\r\n  const err = new APIError('Authentication error', httpStatus.UNAUTHORIZED, true);\r\n  return next(err);\r\n}\r\n\r\n/**\r\n * This is a protected route. Will return random number only if jwt token is provided in header.\r\n * @param req\r\n * @param res\r\n * @returns {*}\r\n */\r\nfunction getRandomNumber(req, res) {\r\n  // req.user is assigned by jwt middleware if valid token is provided\r\n  return res.json({\r\n    user: req.user,\r\n    num: Math.random() * 100\r\n  });\r\n}\r\n\r\nexport default { login, getRandomNumber };\r\n"]}