{"version":3,"sources":["../../src/server/routes/reports.js"],"names":["req","res","next","query","reportType","reportTypes","mastered","runMasteredReport","weakest","runWeakestReport","progress","runProgressReport","columns","key","heading","isDate","list","then","skillData","reportData","buildReportDataFromColumns","console","log","startDate","Date","format","dateTypes","altDateFormat","endDate","client","length","data","title","student","firstname","lastname","headerCols","generateReport","getIndependentId","independentId","getDttTypeId","dttTypeId","listReport","filter","x","skill","targetType","toString","grouped","reduce","agg","curr","name","_id","clientCurriculum","curriculum","push","weakReportData","Object","keys","y","independentCount","skillResult","stringData","concat","value","targetName","createdAt","toPercent","Promise","resolve","reject","dttTypes","targetTypes","number"],"mappings":"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","file":"reports.js","sourcesContent":["import {SkillDataCtrl, MasteredSkillCtrl, TargetTypeCtrl, DttTypeCtrl} from '../controllers'\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport Constants from '../lib/constants';   \r\nimport reportHelper from '../lib/reportHelper';\r\nimport {groupBy} from 'lodash';\r\n\r\n\r\nexport default (req,res,next) => {\r\n    switch(req.query.reportType){\r\n        case Constants.reportTypes.mastered:\r\n            delete req.query.reportType;\r\n            return runMasteredReport(req, res, next);\r\n            break;\r\n        case Constants.reportTypes.weakest:\r\n            delete req.query.reportType;\r\n            return runWeakestReport(req, res, next);\r\n            break;\r\n        case Constants.reportTypes.progress:\r\n            delete req.query.reportType;\r\n            return runProgressReport(req, res, next);\r\n            break;\r\n    }\r\n    \r\n    \r\n\r\n    function runMasteredReport(req, res, next){\r\n        //for now, let's just get all skill data and show...eventually we'll hae to query this out\r\n        let columns = [{\r\n            key: 'curriculum.name',\r\n            heading: 'Curriculum'\r\n        },{\r\n            key: 'skill.goalName',\r\n            heading: 'Goal Name'        \r\n        }, {\r\n            key: 'skill.targetName',\r\n            heading: 'Target Name'\r\n        }, {\r\n            key: 'createdAt',\r\n            heading: 'Date Mastered',\r\n            isDate: true\r\n        },{\r\n            key: 'started',\r\n            heading: 'Date Opened',\r\n            isDate: true\r\n        }, {\r\n            key: 'numberOfTrials',\r\n            heading: 'Total Trials'\r\n        }];\r\n    \r\n\r\n        MasteredSkillCtrl.list(req,res,next).then((skillData) => {\r\n            let reportData = reportHelper.buildReportDataFromColumns(columns,skillData);\r\n            console.log(reportData)\r\n            let startDate = req.query.startDate ? moment(new Date(req.query.startDate)).format(Constants.dateTypes.altDateFormat) : ' No Date Provided '\r\n            let endDate = req.query.endDate ? moment(new Date(req.query.endDate)).format(Constants.dateTypes.altDateFormat) : ' No Date Provided '\r\n            //timeout for data??\r\n            let client = reportData && reportData.length > 0 ? reportData[0].skillData.client : null;\r\n            let data = {\r\n                title: `Targets mastered between ${startDate} and ${endDate}`,\r\n                student: client ? `${client.firstname} ${client.lastname}` : 'No Name Provided',\r\n                data: reportData,\r\n                headerCols: columns\r\n            }           \r\n            reportHelper.generateReport('mastered-report',data,res);\r\n            \r\n        })\r\n   \r\n    }\r\n    function runWeakestReport(req, res, next){\r\n        let columns = [{\r\n            key: 'clientCurriculum.curriculum.name',\r\n            heading: 'Curriculum'\r\n        }, {\r\n            key: 'skill.targetName',\r\n            heading: 'Target Name'\r\n        }, {\r\n            key: 'createdAt',\r\n            heading: 'Date Opened',\r\n            isDate: true\r\n        }, {\r\n            key: 'numberOfTrials',\r\n            heading: 'Total Trials'\r\n        }, {\r\n            key: 'percent',\r\n            heading: 'Percentage'\r\n        }];\r\n\r\n        getIndependentId().then((independentId) => {\r\n            getDttTypeId().then((dttTypeId) => {\r\n                SkillDataCtrl.listReport(req,res,next).then((skillData) =>{\r\n                    //filter out skills that are dtt only\r\n                    skillData = skillData.filter(x=>x.skill.targetType.toString() === dttTypeId.toString());\r\n                    //group by skill and curriculum\r\n                    let grouped = skillData.reduce((agg, curr) => { let name = curr.skill._id + '.' + curr.clientCurriculum.curriculum._id; agg[name] = agg[name] || []; agg[name].push(curr); return agg; }, {})\r\n                    let weakReportData = (Object.keys(grouped)).reduce((agg,y) => {\r\n                        let independentCount = grouped[y].filter(skillResult => skillResult.stringData.toString() == independentId.toString());\r\n                        return agg.concat({columns:[\r\n                            {value:grouped[y][0].clientCurriculum.curriculum.name},\r\n                            {value:grouped[y][0].skill.targetName},\r\n                            {value:moment(grouped[y][0].createdAt).format(Constants.dateTypes.altDateFormat)},\r\n                            {value:grouped[y].length},\r\n                            {value:toPercent(independentCount.length / grouped[y].length)}\r\n                        ]});\r\n                    },[]);\r\n                    //let reportData = reportHelper.buildReportDataFromColumns(columns,skillData);\r\n                    let startDate = req.query.startDate ? moment(new Date(req.query.startDate)).format(Constants.dateTypes.altDateFormat) : ' No Date Provided '\r\n                    let endDate = req.query.endDate ? moment(new Date(req.query.endDate)).format(Constants.dateTypes.altDateFormat) : ' No Date Provided '\r\n                    //timeout for data??\r\n                    let client = skillData && skillData.length > 0 ? skillData[0].clientCurriculum.client : null;\r\n                    let data = {\r\n                        title: `Weakest Targets`,\r\n                        student: client ? `${client.firstname} ${client.lastname}` : 'No Name Provided',\r\n                        data: weakReportData,\r\n                        headerCols: columns\r\n                    }           \r\n                    reportHelper.generateReport('mastered-report',data,res);\r\n                });\r\n    \r\n            })\r\n        })\r\n    \r\n    }\r\n\r\n    function runProgressReport(req, res, next){\r\n        \r\n    }\r\n\r\n    function getIndependentId(){\r\n        return new Promise((resolve,reject) => {\r\n            DttTypeCtrl.list({query:{name: 'Independent'}},res,next).then((dttTypes) => {\r\n                let independentId = ''\r\n                if(dttTypes && dttTypes.length > 0)\r\n                    return resolve(dttTypes[0]._id);\r\n            });    \r\n        })\r\n    }\r\n    function getDttTypeId(){\r\n        return new Promise((resolve,reject) => {\r\n            TargetTypeCtrl.list({query:{name: 'DTT'}},res,next).then((targetTypes) => {\r\n                let dttTypeId = ''\r\n                if(targetTypes && targetTypes.length > 0)\r\n                    return resolve(targetTypes[0]._id);\r\n            });    \r\n        })\r\n    }\r\n    function toPercent(number){\r\n        return number*100 + '%'\r\n    }\r\n\r\n}\r\n"]}