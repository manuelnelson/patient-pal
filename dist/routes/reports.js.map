{"version":3,"sources":["../../src/server/routes/reports.js"],"names":["req","res","next","console","log","query","filePath","join","__dirname","html","readFileSync","compiledTemplate","compile","columns","key","heading","isDate","dateFormat","altDateFormat","listReport","then","skillData","reportData","map","skillDatum","dataObject","each","column","keys","split","value","format","push","startDate","Date","endDate","client","length","clientCurriculum","data","title","student","firstname","lastname","headerCols","withData","options","create","toBuffer","err","buffer","contentType","end"],"mappings":"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","file":"reports.js","sourcesContent":["import pdf from 'html-pdf';\r\nimport handlebars from 'handlebars';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport {SkillDataCtrl} from '../controllers'\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n// handlebars.registerHelper('dateFormat',function(date, format){\r\n//     return moment(date).format(format);\r\n// })\r\nexport default (req,res,next) => {\r\n    console.log(req.query) \r\n    //for now, let's just get all skill data and show...eventually we'll hae to query this out\r\n    let filePath = path.join(__dirname, '../views/report.html')\r\n    let html = fs.readFileSync(filePath, 'utf8');\r\n    let compiledTemplate = handlebars.compile(html);\r\n    let columns = [{\r\n        key: 'clientCurriculum.curriculum.name',\r\n        heading: 'Curriculum'\r\n    },{\r\n        key: 'skill.goalName',\r\n        heading: 'Goal Name'        \r\n    }, {\r\n        key: 'skill.targetName',\r\n        heading: 'Target Name'\r\n    }, {\r\n        key: 'createdAt',\r\n        heading: 'Date Mastered',\r\n        isDate: true\r\n    }, {\r\n        key: 'skill.numberOfTrials',\r\n        heading: 'Total Trials'\r\n    }];\r\n    const dateFormat = 'MMMM do, YYYY';\r\n    const altDateFormat = 'MMMM DD, YYYY';\r\n    \r\n    SkillDataCtrl.listReport(req,res,next).then((skillData) =>{\r\n        let reportData = _.map(skillData, (skillDatum) => {\r\n            let dataObject = {\r\n                skillData: skillDatum,\r\n                columns: []\r\n            };\r\n\r\n            _.each(columns, (column) =>{\r\n                let keys = column.key.split('.');\r\n                let value = skillDatum;\r\n                _.each(keys, (key) => {\r\n                    if(value)\r\n                        value = value[key];\r\n                })\r\n                if(column.isDate){\r\n                    value = moment(value).format(altDateFormat);\r\n                }\r\n                dataObject.columns.push({\r\n                    value: value\r\n                })\r\n            })\r\n            return dataObject;\r\n        });\r\n        let startDate = req.query.startDate ? moment(new Date(req.query.startDate)).format(altDateFormat) : ' No Date Provided '\r\n        let endDate = req.query.endDate ? moment(new Date(req.query.endDate)).format(altDateFormat) : ' No Date Provided '\r\n        //timeout for data??\r\n        let client = reportData && reportData.length > 0 ? reportData[0].skillData.clientCurriculum.client : null;\r\n        //let student = reportData && reportData.length > 0 ? reportData[0].skillData.clientCurriculum.client.firstname + ' ' +  : 'No name provided';\r\n        let data = {\r\n            title: `Targets mastered between ${startDate} and ${endDate}`,\r\n            student: client ? client.firstname + ' ' + client.lastname : 'No Name Provided',\r\n            data: reportData,\r\n            headerCols: columns\r\n        }\r\n        let withData = compiledTemplate(data);\r\n        let options = { format: 'Letter' };\r\n        pdf.create(withData, options).toBuffer((err, buffer) => {\r\n            if (err) return console.log(err);\r\n            res.contentType(\"application/pdf\");\r\n            return res.end(buffer,'binary')\r\n            //console.log(res); // { filename: '/app/businesscard.pdf' }\r\n        });\r\n    \r\n    \r\n    })\r\n\r\n\r\n    //TODO: get the data\r\n    // Render the view\r\n\t// return hbs.render('report').then((renderedTemplate)=>{\r\n        \r\n    //     let options = { format: 'Letter' };\r\n\t\t\r\n\r\n    // });\r\n}"]}